Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DECIMAL

Grammar

Rule 0     S' -> s
Rule 1     s -> block
Rule 2     block -> block instruccion
Rule 3     block -> instruccion
Rule 4     instruccion -> print
Rule 5     instruccion -> ifinstruction
Rule 6     instruccion -> whileinstruction
Rule 7     instruccion -> declaration
Rule 8     instruccion -> arraydeclaration
Rule 9     instruccion -> assignment
Rule 10    instruccion -> breakstmt
Rule 11    instruccion -> continuestmt
Rule 12    instruccion -> functionstmt
Rule 13    instruccion -> call
Rule 14    instruccion -> returnstmt
Rule 15    instruccion -> interfacecreation
Rule 16    instruccion -> interdeclaration
Rule 17    print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
Rule 18    ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
Rule 19    ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
Rule 20    ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
Rule 21    whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
Rule 22    declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA
Rule 23    arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA
Rule 24    interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA
Rule 25    interfaceContent -> interfaceContent COMA ID DOSPTS expression
Rule 26    interfaceContent -> ID DOSPTS expression
Rule 27    assignment -> ID IGUAL expression PUNTOCOMA
Rule 28    returnstmt -> RETURN expression PUNTOCOMA
Rule 29    returnstmt -> RETURN PUNTOCOMA
Rule 30    call -> ID PARIZQ expressionList PARDER PUNTOCOMA
Rule 31    call -> ID PARIZQ PARDER PUNTOCOMA
Rule 32    functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
Rule 33    funcparams -> PARIZQ paramsList PARDER
Rule 34    funcparams -> PARIZQ PARDER
Rule 35    interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
Rule 36    attributeList -> attributeList ID DOSPTS type PUNTOCOMA
Rule 37    attributeList -> ID DOSPTS type PUNTOCOMA
Rule 38    paramsList -> paramsList COMA ID DOSPTS type
Rule 39    paramsList -> ID DOSPTS type
Rule 40    functype -> DOSPTS type
Rule 41    functype -> <empty>
Rule 42    breakstmt -> BREAK PUNTOCOMA
Rule 43    continuestmt -> CONTINUE PUNTOCOMA
Rule 44    type -> NUMBER
Rule 45    type -> FLOAT
Rule 46    type -> STRING
Rule 47    type -> BOOL
Rule 48    expressionList -> expressionList COMA expression
Rule 49    expressionList -> expression
Rule 50    expression -> expression MAS expression
Rule 51    expression -> expression MENOS expression
Rule 52    expression -> expression POR expression
Rule 53    expression -> expression DIVIDIDO expression
Rule 54    expression -> expression MAYOR expression
Rule 55    expression -> expression MENOR expression
Rule 56    expression -> expression MAYORIG expression
Rule 57    expression -> expression MENORIG expression
Rule 58    expression -> expression IGUALDAD expression
Rule 59    expression -> expression DIF expression
Rule 60    expression -> expression AND expression
Rule 61    expression -> expression OR expression
Rule 62    expression -> NOT expression
Rule 63    expression -> PARIZQ expression PARDER
Rule 64    expression -> expression TERN expression DOSPTS expression
Rule 65    expression -> ENTERO
Rule 66    expression -> CADENA
Rule 67    expression -> listArray
Rule 68    expression -> CORIZQ expressionList CORDER
Rule 69    expression -> ID PARIZQ expressionList PARDER
Rule 70    expression -> ID PARIZQ PARDER
Rule 71    listArray -> ID CORIZQ expression CORDER
Rule 72    listArray -> ID

Terminals, with rules where they appear

AND                  : 60
BOOL                 : 47
BREAK                : 42
CADENA               : 66
COMA                 : 25 38 48
CONSOLE              : 17
CONTINUE             : 43
CORDER               : 23 68 71
CORIZQ               : 23 68 71
DECIMAL              : 
DIF                  : 59
DIVIDIDO             : 53
DOSPTS               : 22 23 24 25 26 36 37 38 39 40 64
ELSE                 : 18 19
ENTERO               : 65
FLOAT                : 45
FUNC                 : 32
ID                   : 22 23 24 24 25 26 27 30 31 32 35 36 37 38 39 69 70 71 72
IF                   : 18 19 20
IGUAL                : 22 23 24 27
IGUALDAD             : 58
INTERFACE            : 35
LLAVEDER             : 18 18 19 20 21 24 32 35
LLAVEIZQ             : 18 18 19 20 21 24 32 35
LOG                  : 17
MAS                  : 50
MAYOR                : 54
MAYORIG              : 56
MENOR                : 55
MENORIG              : 57
MENOS                : 51
NOT                  : 62
NUMBER               : 44
OR                   : 61
PARDER               : 17 18 19 20 21 30 31 33 34 63 69 70
PARIZQ               : 17 18 19 20 21 30 31 33 34 63 69 70
POR                  : 52
PUNTO                : 17
PUNTOCOMA            : 17 22 23 24 27 28 29 30 31 35 36 37 42 43
RETURN               : 28 29
STRING               : 46
TERN                 : 64
VAR                  : 22 23 24
WHILE                : 21
error                : 

Nonterminals, with rules where they appear

arraydeclaration     : 8
assignment           : 9
attributeList        : 35 36
block                : 1 2 18 18 19 20 21 32
breakstmt            : 10
call                 : 13
continuestmt         : 11
declaration          : 7
expression           : 18 19 20 21 22 23 25 26 27 28 48 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 63 64 64 64 71
expressionList       : 17 30 48 68 69
funcparams           : 32
functionstmt         : 12
functype             : 32
ifinstruction        : 5 19
instruccion          : 2 3
interdeclaration     : 16
interfaceContent     : 24 25
interfacecreation    : 15
listArray            : 67
paramsList           : 33 38
print                : 4
returnstmt           : 14
s                    : 0
type                 : 22 23 36 37 38 39 40
whileinstruction     : 6

Parsing method: LALR

state 0

    (0) S' -> . s
    (1) s -> . block
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . assignment
    (10) instruccion -> . breakstmt
    (11) instruccion -> . continuestmt
    (12) instruccion -> . functionstmt
    (13) instruccion -> . call
    (14) instruccion -> . returnstmt
    (15) instruccion -> . interfacecreation
    (16) instruccion -> . interdeclaration
    (17) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (18) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (21) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (22) declaration -> . VAR ID DOSPTS type IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (27) assignment -> . ID IGUAL expression PUNTOCOMA
    (42) breakstmt -> . BREAK PUNTOCOMA
    (43) continuestmt -> . CONTINUE PUNTOCOMA
    (32) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (30) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (31) call -> . ID PARIZQ PARDER PUNTOCOMA
    (28) returnstmt -> . RETURN expression PUNTOCOMA
    (29) returnstmt -> . RETURN PUNTOCOMA
    (35) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (24) interdeclaration -> . VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    CONSOLE         shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    VAR             shift and go to state 20
    ID              shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    FUNC            shift and go to state 24
    RETURN          shift and go to state 25
    INTERFACE       shift and go to state 26

    s                              shift and go to state 1
    block                          shift and go to state 2
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    assignment                     shift and go to state 9
    breakstmt                      shift and go to state 10
    continuestmt                   shift and go to state 11
    functionstmt                   shift and go to state 12
    call                           shift and go to state 13
    returnstmt                     shift and go to state 14
    interfacecreation              shift and go to state 15
    interdeclaration               shift and go to state 16

state 1

    (0) S' -> s .



state 2

    (1) s -> block .
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . assignment
    (10) instruccion -> . breakstmt
    (11) instruccion -> . continuestmt
    (12) instruccion -> . functionstmt
    (13) instruccion -> . call
    (14) instruccion -> . returnstmt
    (15) instruccion -> . interfacecreation
    (16) instruccion -> . interdeclaration
    (17) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (18) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (21) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (22) declaration -> . VAR ID DOSPTS type IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (27) assignment -> . ID IGUAL expression PUNTOCOMA
    (42) breakstmt -> . BREAK PUNTOCOMA
    (43) continuestmt -> . CONTINUE PUNTOCOMA
    (32) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (30) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (31) call -> . ID PARIZQ PARDER PUNTOCOMA
    (28) returnstmt -> . RETURN expression PUNTOCOMA
    (29) returnstmt -> . RETURN PUNTOCOMA
    (35) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (24) interdeclaration -> . VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    $end            reduce using rule 1 (s -> block .)
    CONSOLE         shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    VAR             shift and go to state 20
    ID              shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    FUNC            shift and go to state 24
    RETURN          shift and go to state 25
    INTERFACE       shift and go to state 26

    instruccion                    shift and go to state 27
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    assignment                     shift and go to state 9
    breakstmt                      shift and go to state 10
    continuestmt                   shift and go to state 11
    functionstmt                   shift and go to state 12
    call                           shift and go to state 13
    returnstmt                     shift and go to state 14
    interfacecreation              shift and go to state 15
    interdeclaration               shift and go to state 16

state 3

    (3) block -> instruccion .

    CONSOLE         reduce using rule 3 (block -> instruccion .)
    IF              reduce using rule 3 (block -> instruccion .)
    WHILE           reduce using rule 3 (block -> instruccion .)
    VAR             reduce using rule 3 (block -> instruccion .)
    ID              reduce using rule 3 (block -> instruccion .)
    BREAK           reduce using rule 3 (block -> instruccion .)
    CONTINUE        reduce using rule 3 (block -> instruccion .)
    FUNC            reduce using rule 3 (block -> instruccion .)
    RETURN          reduce using rule 3 (block -> instruccion .)
    INTERFACE       reduce using rule 3 (block -> instruccion .)
    $end            reduce using rule 3 (block -> instruccion .)
    LLAVEDER        reduce using rule 3 (block -> instruccion .)


state 4

    (4) instruccion -> print .

    CONSOLE         reduce using rule 4 (instruccion -> print .)
    IF              reduce using rule 4 (instruccion -> print .)
    WHILE           reduce using rule 4 (instruccion -> print .)
    VAR             reduce using rule 4 (instruccion -> print .)
    ID              reduce using rule 4 (instruccion -> print .)
    BREAK           reduce using rule 4 (instruccion -> print .)
    CONTINUE        reduce using rule 4 (instruccion -> print .)
    FUNC            reduce using rule 4 (instruccion -> print .)
    RETURN          reduce using rule 4 (instruccion -> print .)
    INTERFACE       reduce using rule 4 (instruccion -> print .)
    $end            reduce using rule 4 (instruccion -> print .)
    LLAVEDER        reduce using rule 4 (instruccion -> print .)


state 5

    (5) instruccion -> ifinstruction .

    CONSOLE         reduce using rule 5 (instruccion -> ifinstruction .)
    IF              reduce using rule 5 (instruccion -> ifinstruction .)
    WHILE           reduce using rule 5 (instruccion -> ifinstruction .)
    VAR             reduce using rule 5 (instruccion -> ifinstruction .)
    ID              reduce using rule 5 (instruccion -> ifinstruction .)
    BREAK           reduce using rule 5 (instruccion -> ifinstruction .)
    CONTINUE        reduce using rule 5 (instruccion -> ifinstruction .)
    FUNC            reduce using rule 5 (instruccion -> ifinstruction .)
    RETURN          reduce using rule 5 (instruccion -> ifinstruction .)
    INTERFACE       reduce using rule 5 (instruccion -> ifinstruction .)
    $end            reduce using rule 5 (instruccion -> ifinstruction .)
    LLAVEDER        reduce using rule 5 (instruccion -> ifinstruction .)


state 6

    (6) instruccion -> whileinstruction .

    CONSOLE         reduce using rule 6 (instruccion -> whileinstruction .)
    IF              reduce using rule 6 (instruccion -> whileinstruction .)
    WHILE           reduce using rule 6 (instruccion -> whileinstruction .)
    VAR             reduce using rule 6 (instruccion -> whileinstruction .)
    ID              reduce using rule 6 (instruccion -> whileinstruction .)
    BREAK           reduce using rule 6 (instruccion -> whileinstruction .)
    CONTINUE        reduce using rule 6 (instruccion -> whileinstruction .)
    FUNC            reduce using rule 6 (instruccion -> whileinstruction .)
    RETURN          reduce using rule 6 (instruccion -> whileinstruction .)
    INTERFACE       reduce using rule 6 (instruccion -> whileinstruction .)
    $end            reduce using rule 6 (instruccion -> whileinstruction .)
    LLAVEDER        reduce using rule 6 (instruccion -> whileinstruction .)


state 7

    (7) instruccion -> declaration .

    CONSOLE         reduce using rule 7 (instruccion -> declaration .)
    IF              reduce using rule 7 (instruccion -> declaration .)
    WHILE           reduce using rule 7 (instruccion -> declaration .)
    VAR             reduce using rule 7 (instruccion -> declaration .)
    ID              reduce using rule 7 (instruccion -> declaration .)
    BREAK           reduce using rule 7 (instruccion -> declaration .)
    CONTINUE        reduce using rule 7 (instruccion -> declaration .)
    FUNC            reduce using rule 7 (instruccion -> declaration .)
    RETURN          reduce using rule 7 (instruccion -> declaration .)
    INTERFACE       reduce using rule 7 (instruccion -> declaration .)
    $end            reduce using rule 7 (instruccion -> declaration .)
    LLAVEDER        reduce using rule 7 (instruccion -> declaration .)


state 8

    (8) instruccion -> arraydeclaration .

    CONSOLE         reduce using rule 8 (instruccion -> arraydeclaration .)
    IF              reduce using rule 8 (instruccion -> arraydeclaration .)
    WHILE           reduce using rule 8 (instruccion -> arraydeclaration .)
    VAR             reduce using rule 8 (instruccion -> arraydeclaration .)
    ID              reduce using rule 8 (instruccion -> arraydeclaration .)
    BREAK           reduce using rule 8 (instruccion -> arraydeclaration .)
    CONTINUE        reduce using rule 8 (instruccion -> arraydeclaration .)
    FUNC            reduce using rule 8 (instruccion -> arraydeclaration .)
    RETURN          reduce using rule 8 (instruccion -> arraydeclaration .)
    INTERFACE       reduce using rule 8 (instruccion -> arraydeclaration .)
    $end            reduce using rule 8 (instruccion -> arraydeclaration .)
    LLAVEDER        reduce using rule 8 (instruccion -> arraydeclaration .)


state 9

    (9) instruccion -> assignment .

    CONSOLE         reduce using rule 9 (instruccion -> assignment .)
    IF              reduce using rule 9 (instruccion -> assignment .)
    WHILE           reduce using rule 9 (instruccion -> assignment .)
    VAR             reduce using rule 9 (instruccion -> assignment .)
    ID              reduce using rule 9 (instruccion -> assignment .)
    BREAK           reduce using rule 9 (instruccion -> assignment .)
    CONTINUE        reduce using rule 9 (instruccion -> assignment .)
    FUNC            reduce using rule 9 (instruccion -> assignment .)
    RETURN          reduce using rule 9 (instruccion -> assignment .)
    INTERFACE       reduce using rule 9 (instruccion -> assignment .)
    $end            reduce using rule 9 (instruccion -> assignment .)
    LLAVEDER        reduce using rule 9 (instruccion -> assignment .)


state 10

    (10) instruccion -> breakstmt .

    CONSOLE         reduce using rule 10 (instruccion -> breakstmt .)
    IF              reduce using rule 10 (instruccion -> breakstmt .)
    WHILE           reduce using rule 10 (instruccion -> breakstmt .)
    VAR             reduce using rule 10 (instruccion -> breakstmt .)
    ID              reduce using rule 10 (instruccion -> breakstmt .)
    BREAK           reduce using rule 10 (instruccion -> breakstmt .)
    CONTINUE        reduce using rule 10 (instruccion -> breakstmt .)
    FUNC            reduce using rule 10 (instruccion -> breakstmt .)
    RETURN          reduce using rule 10 (instruccion -> breakstmt .)
    INTERFACE       reduce using rule 10 (instruccion -> breakstmt .)
    $end            reduce using rule 10 (instruccion -> breakstmt .)
    LLAVEDER        reduce using rule 10 (instruccion -> breakstmt .)


state 11

    (11) instruccion -> continuestmt .

    CONSOLE         reduce using rule 11 (instruccion -> continuestmt .)
    IF              reduce using rule 11 (instruccion -> continuestmt .)
    WHILE           reduce using rule 11 (instruccion -> continuestmt .)
    VAR             reduce using rule 11 (instruccion -> continuestmt .)
    ID              reduce using rule 11 (instruccion -> continuestmt .)
    BREAK           reduce using rule 11 (instruccion -> continuestmt .)
    CONTINUE        reduce using rule 11 (instruccion -> continuestmt .)
    FUNC            reduce using rule 11 (instruccion -> continuestmt .)
    RETURN          reduce using rule 11 (instruccion -> continuestmt .)
    INTERFACE       reduce using rule 11 (instruccion -> continuestmt .)
    $end            reduce using rule 11 (instruccion -> continuestmt .)
    LLAVEDER        reduce using rule 11 (instruccion -> continuestmt .)


state 12

    (12) instruccion -> functionstmt .

    CONSOLE         reduce using rule 12 (instruccion -> functionstmt .)
    IF              reduce using rule 12 (instruccion -> functionstmt .)
    WHILE           reduce using rule 12 (instruccion -> functionstmt .)
    VAR             reduce using rule 12 (instruccion -> functionstmt .)
    ID              reduce using rule 12 (instruccion -> functionstmt .)
    BREAK           reduce using rule 12 (instruccion -> functionstmt .)
    CONTINUE        reduce using rule 12 (instruccion -> functionstmt .)
    FUNC            reduce using rule 12 (instruccion -> functionstmt .)
    RETURN          reduce using rule 12 (instruccion -> functionstmt .)
    INTERFACE       reduce using rule 12 (instruccion -> functionstmt .)
    $end            reduce using rule 12 (instruccion -> functionstmt .)
    LLAVEDER        reduce using rule 12 (instruccion -> functionstmt .)


state 13

    (13) instruccion -> call .

    CONSOLE         reduce using rule 13 (instruccion -> call .)
    IF              reduce using rule 13 (instruccion -> call .)
    WHILE           reduce using rule 13 (instruccion -> call .)
    VAR             reduce using rule 13 (instruccion -> call .)
    ID              reduce using rule 13 (instruccion -> call .)
    BREAK           reduce using rule 13 (instruccion -> call .)
    CONTINUE        reduce using rule 13 (instruccion -> call .)
    FUNC            reduce using rule 13 (instruccion -> call .)
    RETURN          reduce using rule 13 (instruccion -> call .)
    INTERFACE       reduce using rule 13 (instruccion -> call .)
    $end            reduce using rule 13 (instruccion -> call .)
    LLAVEDER        reduce using rule 13 (instruccion -> call .)


state 14

    (14) instruccion -> returnstmt .

    CONSOLE         reduce using rule 14 (instruccion -> returnstmt .)
    IF              reduce using rule 14 (instruccion -> returnstmt .)
    WHILE           reduce using rule 14 (instruccion -> returnstmt .)
    VAR             reduce using rule 14 (instruccion -> returnstmt .)
    ID              reduce using rule 14 (instruccion -> returnstmt .)
    BREAK           reduce using rule 14 (instruccion -> returnstmt .)
    CONTINUE        reduce using rule 14 (instruccion -> returnstmt .)
    FUNC            reduce using rule 14 (instruccion -> returnstmt .)
    RETURN          reduce using rule 14 (instruccion -> returnstmt .)
    INTERFACE       reduce using rule 14 (instruccion -> returnstmt .)
    $end            reduce using rule 14 (instruccion -> returnstmt .)
    LLAVEDER        reduce using rule 14 (instruccion -> returnstmt .)


state 15

    (15) instruccion -> interfacecreation .

    CONSOLE         reduce using rule 15 (instruccion -> interfacecreation .)
    IF              reduce using rule 15 (instruccion -> interfacecreation .)
    WHILE           reduce using rule 15 (instruccion -> interfacecreation .)
    VAR             reduce using rule 15 (instruccion -> interfacecreation .)
    ID              reduce using rule 15 (instruccion -> interfacecreation .)
    BREAK           reduce using rule 15 (instruccion -> interfacecreation .)
    CONTINUE        reduce using rule 15 (instruccion -> interfacecreation .)
    FUNC            reduce using rule 15 (instruccion -> interfacecreation .)
    RETURN          reduce using rule 15 (instruccion -> interfacecreation .)
    INTERFACE       reduce using rule 15 (instruccion -> interfacecreation .)
    $end            reduce using rule 15 (instruccion -> interfacecreation .)
    LLAVEDER        reduce using rule 15 (instruccion -> interfacecreation .)


state 16

    (16) instruccion -> interdeclaration .

    CONSOLE         reduce using rule 16 (instruccion -> interdeclaration .)
    IF              reduce using rule 16 (instruccion -> interdeclaration .)
    WHILE           reduce using rule 16 (instruccion -> interdeclaration .)
    VAR             reduce using rule 16 (instruccion -> interdeclaration .)
    ID              reduce using rule 16 (instruccion -> interdeclaration .)
    BREAK           reduce using rule 16 (instruccion -> interdeclaration .)
    CONTINUE        reduce using rule 16 (instruccion -> interdeclaration .)
    FUNC            reduce using rule 16 (instruccion -> interdeclaration .)
    RETURN          reduce using rule 16 (instruccion -> interdeclaration .)
    INTERFACE       reduce using rule 16 (instruccion -> interdeclaration .)
    $end            reduce using rule 16 (instruccion -> interdeclaration .)
    LLAVEDER        reduce using rule 16 (instruccion -> interdeclaration .)


state 17

    (17) print -> CONSOLE . PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA

    PUNTO           shift and go to state 28


state 18

    (18) ifinstruction -> IF . PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> IF . PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> IF . PARIZQ expression PARDER LLAVEIZQ block LLAVEDER

    PARIZQ          shift and go to state 29


state 19

    (21) whileinstruction -> WHILE . PARIZQ expression PARDER LLAVEIZQ block LLAVEDER

    PARIZQ          shift and go to state 30


state 20

    (22) declaration -> VAR . ID DOSPTS type IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> VAR . ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (24) interdeclaration -> VAR . ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    ID              shift and go to state 31


state 21

    (27) assignment -> ID . IGUAL expression PUNTOCOMA
    (30) call -> ID . PARIZQ expressionList PARDER PUNTOCOMA
    (31) call -> ID . PARIZQ PARDER PUNTOCOMA

    IGUAL           shift and go to state 32
    PARIZQ          shift and go to state 33


state 22

    (42) breakstmt -> BREAK . PUNTOCOMA

    PUNTOCOMA       shift and go to state 34


state 23

    (43) continuestmt -> CONTINUE . PUNTOCOMA

    PUNTOCOMA       shift and go to state 35


state 24

    (32) functionstmt -> FUNC . ID funcparams functype LLAVEIZQ block LLAVEDER

    ID              shift and go to state 36


state 25

    (28) returnstmt -> RETURN . expression PUNTOCOMA
    (29) returnstmt -> RETURN . PUNTOCOMA
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    PUNTOCOMA       shift and go to state 38
    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 37
    listArray                      shift and go to state 43

state 26

    (35) interfacecreation -> INTERFACE . ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA

    ID              shift and go to state 46


state 27

    (2) block -> block instruccion .

    CONSOLE         reduce using rule 2 (block -> block instruccion .)
    IF              reduce using rule 2 (block -> block instruccion .)
    WHILE           reduce using rule 2 (block -> block instruccion .)
    VAR             reduce using rule 2 (block -> block instruccion .)
    ID              reduce using rule 2 (block -> block instruccion .)
    BREAK           reduce using rule 2 (block -> block instruccion .)
    CONTINUE        reduce using rule 2 (block -> block instruccion .)
    FUNC            reduce using rule 2 (block -> block instruccion .)
    RETURN          reduce using rule 2 (block -> block instruccion .)
    INTERFACE       reduce using rule 2 (block -> block instruccion .)
    $end            reduce using rule 2 (block -> block instruccion .)
    LLAVEDER        reduce using rule 2 (block -> block instruccion .)


state 28

    (17) print -> CONSOLE PUNTO . LOG PARIZQ expressionList PARDER PUNTOCOMA

    LOG             shift and go to state 47


state 29

    (18) ifinstruction -> IF PARIZQ . expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> IF PARIZQ . expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> IF PARIZQ . expression PARDER LLAVEIZQ block LLAVEDER
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 48
    listArray                      shift and go to state 43

state 30

    (21) whileinstruction -> WHILE PARIZQ . expression PARDER LLAVEIZQ block LLAVEDER
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 49
    listArray                      shift and go to state 43

state 31

    (22) declaration -> VAR ID . DOSPTS type IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> VAR ID . DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (24) interdeclaration -> VAR ID . DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    DOSPTS          shift and go to state 50


state 32

    (27) assignment -> ID IGUAL . expression PUNTOCOMA
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 51
    listArray                      shift and go to state 43

state 33

    (30) call -> ID PARIZQ . expressionList PARDER PUNTOCOMA
    (31) call -> ID PARIZQ . PARDER PUNTOCOMA
    (48) expressionList -> . expressionList COMA expression
    (49) expressionList -> . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    PARDER          shift and go to state 53
    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expressionList                 shift and go to state 52
    expression                     shift and go to state 54
    listArray                      shift and go to state 43

state 34

    (42) breakstmt -> BREAK PUNTOCOMA .

    CONSOLE         reduce using rule 42 (breakstmt -> BREAK PUNTOCOMA .)
    IF              reduce using rule 42 (breakstmt -> BREAK PUNTOCOMA .)
    WHILE           reduce using rule 42 (breakstmt -> BREAK PUNTOCOMA .)
    VAR             reduce using rule 42 (breakstmt -> BREAK PUNTOCOMA .)
    ID              reduce using rule 42 (breakstmt -> BREAK PUNTOCOMA .)
    BREAK           reduce using rule 42 (breakstmt -> BREAK PUNTOCOMA .)
    CONTINUE        reduce using rule 42 (breakstmt -> BREAK PUNTOCOMA .)
    FUNC            reduce using rule 42 (breakstmt -> BREAK PUNTOCOMA .)
    RETURN          reduce using rule 42 (breakstmt -> BREAK PUNTOCOMA .)
    INTERFACE       reduce using rule 42 (breakstmt -> BREAK PUNTOCOMA .)
    $end            reduce using rule 42 (breakstmt -> BREAK PUNTOCOMA .)
    LLAVEDER        reduce using rule 42 (breakstmt -> BREAK PUNTOCOMA .)


state 35

    (43) continuestmt -> CONTINUE PUNTOCOMA .

    CONSOLE         reduce using rule 43 (continuestmt -> CONTINUE PUNTOCOMA .)
    IF              reduce using rule 43 (continuestmt -> CONTINUE PUNTOCOMA .)
    WHILE           reduce using rule 43 (continuestmt -> CONTINUE PUNTOCOMA .)
    VAR             reduce using rule 43 (continuestmt -> CONTINUE PUNTOCOMA .)
    ID              reduce using rule 43 (continuestmt -> CONTINUE PUNTOCOMA .)
    BREAK           reduce using rule 43 (continuestmt -> CONTINUE PUNTOCOMA .)
    CONTINUE        reduce using rule 43 (continuestmt -> CONTINUE PUNTOCOMA .)
    FUNC            reduce using rule 43 (continuestmt -> CONTINUE PUNTOCOMA .)
    RETURN          reduce using rule 43 (continuestmt -> CONTINUE PUNTOCOMA .)
    INTERFACE       reduce using rule 43 (continuestmt -> CONTINUE PUNTOCOMA .)
    $end            reduce using rule 43 (continuestmt -> CONTINUE PUNTOCOMA .)
    LLAVEDER        reduce using rule 43 (continuestmt -> CONTINUE PUNTOCOMA .)


state 36

    (32) functionstmt -> FUNC ID . funcparams functype LLAVEIZQ block LLAVEDER
    (33) funcparams -> . PARIZQ paramsList PARDER
    (34) funcparams -> . PARIZQ PARDER

    PARIZQ          shift and go to state 56

    funcparams                     shift and go to state 55

state 37

    (28) returnstmt -> RETURN expression . PUNTOCOMA
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       shift and go to state 57
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70


state 38

    (29) returnstmt -> RETURN PUNTOCOMA .

    CONSOLE         reduce using rule 29 (returnstmt -> RETURN PUNTOCOMA .)
    IF              reduce using rule 29 (returnstmt -> RETURN PUNTOCOMA .)
    WHILE           reduce using rule 29 (returnstmt -> RETURN PUNTOCOMA .)
    VAR             reduce using rule 29 (returnstmt -> RETURN PUNTOCOMA .)
    ID              reduce using rule 29 (returnstmt -> RETURN PUNTOCOMA .)
    BREAK           reduce using rule 29 (returnstmt -> RETURN PUNTOCOMA .)
    CONTINUE        reduce using rule 29 (returnstmt -> RETURN PUNTOCOMA .)
    FUNC            reduce using rule 29 (returnstmt -> RETURN PUNTOCOMA .)
    RETURN          reduce using rule 29 (returnstmt -> RETURN PUNTOCOMA .)
    INTERFACE       reduce using rule 29 (returnstmt -> RETURN PUNTOCOMA .)
    $end            reduce using rule 29 (returnstmt -> RETURN PUNTOCOMA .)
    LLAVEDER        reduce using rule 29 (returnstmt -> RETURN PUNTOCOMA .)


state 39

    (62) expression -> NOT . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 71
    listArray                      shift and go to state 43

state 40

    (63) expression -> PARIZQ . expression PARDER
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 72
    listArray                      shift and go to state 43

state 41

    (65) expression -> ENTERO .

    PUNTOCOMA       reduce using rule 65 (expression -> ENTERO .)
    MAS             reduce using rule 65 (expression -> ENTERO .)
    MENOS           reduce using rule 65 (expression -> ENTERO .)
    POR             reduce using rule 65 (expression -> ENTERO .)
    DIVIDIDO        reduce using rule 65 (expression -> ENTERO .)
    MAYOR           reduce using rule 65 (expression -> ENTERO .)
    MENOR           reduce using rule 65 (expression -> ENTERO .)
    MAYORIG         reduce using rule 65 (expression -> ENTERO .)
    MENORIG         reduce using rule 65 (expression -> ENTERO .)
    IGUALDAD        reduce using rule 65 (expression -> ENTERO .)
    DIF             reduce using rule 65 (expression -> ENTERO .)
    AND             reduce using rule 65 (expression -> ENTERO .)
    OR              reduce using rule 65 (expression -> ENTERO .)
    TERN            reduce using rule 65 (expression -> ENTERO .)
    PARDER          reduce using rule 65 (expression -> ENTERO .)
    COMA            reduce using rule 65 (expression -> ENTERO .)
    CORDER          reduce using rule 65 (expression -> ENTERO .)
    DOSPTS          reduce using rule 65 (expression -> ENTERO .)
    LLAVEDER        reduce using rule 65 (expression -> ENTERO .)


state 42

    (66) expression -> CADENA .

    PUNTOCOMA       reduce using rule 66 (expression -> CADENA .)
    MAS             reduce using rule 66 (expression -> CADENA .)
    MENOS           reduce using rule 66 (expression -> CADENA .)
    POR             reduce using rule 66 (expression -> CADENA .)
    DIVIDIDO        reduce using rule 66 (expression -> CADENA .)
    MAYOR           reduce using rule 66 (expression -> CADENA .)
    MENOR           reduce using rule 66 (expression -> CADENA .)
    MAYORIG         reduce using rule 66 (expression -> CADENA .)
    MENORIG         reduce using rule 66 (expression -> CADENA .)
    IGUALDAD        reduce using rule 66 (expression -> CADENA .)
    DIF             reduce using rule 66 (expression -> CADENA .)
    AND             reduce using rule 66 (expression -> CADENA .)
    OR              reduce using rule 66 (expression -> CADENA .)
    TERN            reduce using rule 66 (expression -> CADENA .)
    PARDER          reduce using rule 66 (expression -> CADENA .)
    COMA            reduce using rule 66 (expression -> CADENA .)
    CORDER          reduce using rule 66 (expression -> CADENA .)
    DOSPTS          reduce using rule 66 (expression -> CADENA .)
    LLAVEDER        reduce using rule 66 (expression -> CADENA .)


state 43

    (67) expression -> listArray .

    PUNTOCOMA       reduce using rule 67 (expression -> listArray .)
    MAS             reduce using rule 67 (expression -> listArray .)
    MENOS           reduce using rule 67 (expression -> listArray .)
    POR             reduce using rule 67 (expression -> listArray .)
    DIVIDIDO        reduce using rule 67 (expression -> listArray .)
    MAYOR           reduce using rule 67 (expression -> listArray .)
    MENOR           reduce using rule 67 (expression -> listArray .)
    MAYORIG         reduce using rule 67 (expression -> listArray .)
    MENORIG         reduce using rule 67 (expression -> listArray .)
    IGUALDAD        reduce using rule 67 (expression -> listArray .)
    DIF             reduce using rule 67 (expression -> listArray .)
    AND             reduce using rule 67 (expression -> listArray .)
    OR              reduce using rule 67 (expression -> listArray .)
    TERN            reduce using rule 67 (expression -> listArray .)
    PARDER          reduce using rule 67 (expression -> listArray .)
    COMA            reduce using rule 67 (expression -> listArray .)
    CORDER          reduce using rule 67 (expression -> listArray .)
    DOSPTS          reduce using rule 67 (expression -> listArray .)
    LLAVEDER        reduce using rule 67 (expression -> listArray .)


state 44

    (68) expression -> CORIZQ . expressionList CORDER
    (48) expressionList -> . expressionList COMA expression
    (49) expressionList -> . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expressionList                 shift and go to state 73
    expression                     shift and go to state 54
    listArray                      shift and go to state 43

state 45

    (69) expression -> ID . PARIZQ expressionList PARDER
    (70) expression -> ID . PARIZQ PARDER
    (71) listArray -> ID . CORIZQ expression CORDER
    (72) listArray -> ID .

    PARIZQ          shift and go to state 74
    CORIZQ          shift and go to state 75
    PUNTOCOMA       reduce using rule 72 (listArray -> ID .)
    MAS             reduce using rule 72 (listArray -> ID .)
    MENOS           reduce using rule 72 (listArray -> ID .)
    POR             reduce using rule 72 (listArray -> ID .)
    DIVIDIDO        reduce using rule 72 (listArray -> ID .)
    MAYOR           reduce using rule 72 (listArray -> ID .)
    MENOR           reduce using rule 72 (listArray -> ID .)
    MAYORIG         reduce using rule 72 (listArray -> ID .)
    MENORIG         reduce using rule 72 (listArray -> ID .)
    IGUALDAD        reduce using rule 72 (listArray -> ID .)
    DIF             reduce using rule 72 (listArray -> ID .)
    AND             reduce using rule 72 (listArray -> ID .)
    OR              reduce using rule 72 (listArray -> ID .)
    TERN            reduce using rule 72 (listArray -> ID .)
    PARDER          reduce using rule 72 (listArray -> ID .)
    COMA            reduce using rule 72 (listArray -> ID .)
    CORDER          reduce using rule 72 (listArray -> ID .)
    DOSPTS          reduce using rule 72 (listArray -> ID .)
    LLAVEDER        reduce using rule 72 (listArray -> ID .)


state 46

    (35) interfacecreation -> INTERFACE ID . LLAVEIZQ attributeList LLAVEDER PUNTOCOMA

    LLAVEIZQ        shift and go to state 76


state 47

    (17) print -> CONSOLE PUNTO LOG . PARIZQ expressionList PARDER PUNTOCOMA

    PARIZQ          shift and go to state 77


state 48

    (18) ifinstruction -> IF PARIZQ expression . PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> IF PARIZQ expression . PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> IF PARIZQ expression . PARDER LLAVEIZQ block LLAVEDER
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PARDER          shift and go to state 78
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70


state 49

    (21) whileinstruction -> WHILE PARIZQ expression . PARDER LLAVEIZQ block LLAVEDER
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PARDER          shift and go to state 79
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70


state 50

    (22) declaration -> VAR ID DOSPTS . type IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> VAR ID DOSPTS . type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (24) interdeclaration -> VAR ID DOSPTS . ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA
    (44) type -> . NUMBER
    (45) type -> . FLOAT
    (46) type -> . STRING
    (47) type -> . BOOL

    ID              shift and go to state 80
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    BOOL            shift and go to state 85

    type                           shift and go to state 81

state 51

    (27) assignment -> ID IGUAL expression . PUNTOCOMA
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       shift and go to state 86
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70


state 52

    (30) call -> ID PARIZQ expressionList . PARDER PUNTOCOMA
    (48) expressionList -> expressionList . COMA expression

    PARDER          shift and go to state 87
    COMA            shift and go to state 88


state 53

    (31) call -> ID PARIZQ PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 89


state 54

    (49) expressionList -> expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PARDER          reduce using rule 49 (expressionList -> expression .)
    COMA            reduce using rule 49 (expressionList -> expression .)
    CORDER          reduce using rule 49 (expressionList -> expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70


state 55

    (32) functionstmt -> FUNC ID funcparams . functype LLAVEIZQ block LLAVEDER
    (40) functype -> . DOSPTS type
    (41) functype -> .

    DOSPTS          shift and go to state 91
    LLAVEIZQ        reduce using rule 41 (functype -> .)

    functype                       shift and go to state 90

state 56

    (33) funcparams -> PARIZQ . paramsList PARDER
    (34) funcparams -> PARIZQ . PARDER
    (38) paramsList -> . paramsList COMA ID DOSPTS type
    (39) paramsList -> . ID DOSPTS type

    PARDER          shift and go to state 93
    ID              shift and go to state 94

    paramsList                     shift and go to state 92

state 57

    (28) returnstmt -> RETURN expression PUNTOCOMA .

    CONSOLE         reduce using rule 28 (returnstmt -> RETURN expression PUNTOCOMA .)
    IF              reduce using rule 28 (returnstmt -> RETURN expression PUNTOCOMA .)
    WHILE           reduce using rule 28 (returnstmt -> RETURN expression PUNTOCOMA .)
    VAR             reduce using rule 28 (returnstmt -> RETURN expression PUNTOCOMA .)
    ID              reduce using rule 28 (returnstmt -> RETURN expression PUNTOCOMA .)
    BREAK           reduce using rule 28 (returnstmt -> RETURN expression PUNTOCOMA .)
    CONTINUE        reduce using rule 28 (returnstmt -> RETURN expression PUNTOCOMA .)
    FUNC            reduce using rule 28 (returnstmt -> RETURN expression PUNTOCOMA .)
    RETURN          reduce using rule 28 (returnstmt -> RETURN expression PUNTOCOMA .)
    INTERFACE       reduce using rule 28 (returnstmt -> RETURN expression PUNTOCOMA .)
    $end            reduce using rule 28 (returnstmt -> RETURN expression PUNTOCOMA .)
    LLAVEDER        reduce using rule 28 (returnstmt -> RETURN expression PUNTOCOMA .)


state 58

    (50) expression -> expression MAS . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 95
    listArray                      shift and go to state 43

state 59

    (51) expression -> expression MENOS . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 96
    listArray                      shift and go to state 43

state 60

    (52) expression -> expression POR . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 97
    listArray                      shift and go to state 43

state 61

    (53) expression -> expression DIVIDIDO . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 98
    listArray                      shift and go to state 43

state 62

    (54) expression -> expression MAYOR . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 99
    listArray                      shift and go to state 43

state 63

    (55) expression -> expression MENOR . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 100
    listArray                      shift and go to state 43

state 64

    (56) expression -> expression MAYORIG . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 101
    listArray                      shift and go to state 43

state 65

    (57) expression -> expression MENORIG . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 102
    listArray                      shift and go to state 43

state 66

    (58) expression -> expression IGUALDAD . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 103
    listArray                      shift and go to state 43

state 67

    (59) expression -> expression DIF . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 104
    listArray                      shift and go to state 43

state 68

    (60) expression -> expression AND . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 105
    listArray                      shift and go to state 43

state 69

    (61) expression -> expression OR . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 106
    listArray                      shift and go to state 43

state 70

    (64) expression -> expression TERN . expression DOSPTS expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 107
    listArray                      shift and go to state 43

state 71

    (62) expression -> NOT expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for IGUALDAD resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for TERN resolved as shift
    PUNTOCOMA       reduce using rule 62 (expression -> NOT expression .)
    PARDER          reduce using rule 62 (expression -> NOT expression .)
    COMA            reduce using rule 62 (expression -> NOT expression .)
    CORDER          reduce using rule 62 (expression -> NOT expression .)
    DOSPTS          reduce using rule 62 (expression -> NOT expression .)
    LLAVEDER        reduce using rule 62 (expression -> NOT expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70

  ! MAS             [ reduce using rule 62 (expression -> NOT expression .) ]
  ! MENOS           [ reduce using rule 62 (expression -> NOT expression .) ]
  ! POR             [ reduce using rule 62 (expression -> NOT expression .) ]
  ! DIVIDIDO        [ reduce using rule 62 (expression -> NOT expression .) ]
  ! MAYOR           [ reduce using rule 62 (expression -> NOT expression .) ]
  ! MENOR           [ reduce using rule 62 (expression -> NOT expression .) ]
  ! MAYORIG         [ reduce using rule 62 (expression -> NOT expression .) ]
  ! MENORIG         [ reduce using rule 62 (expression -> NOT expression .) ]
  ! IGUALDAD        [ reduce using rule 62 (expression -> NOT expression .) ]
  ! DIF             [ reduce using rule 62 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 62 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 62 (expression -> NOT expression .) ]
  ! TERN            [ reduce using rule 62 (expression -> NOT expression .) ]


state 72

    (63) expression -> PARIZQ expression . PARDER
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PARDER          shift and go to state 108
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70


state 73

    (68) expression -> CORIZQ expressionList . CORDER
    (48) expressionList -> expressionList . COMA expression

    CORDER          shift and go to state 109
    COMA            shift and go to state 88


state 74

    (69) expression -> ID PARIZQ . expressionList PARDER
    (70) expression -> ID PARIZQ . PARDER
    (48) expressionList -> . expressionList COMA expression
    (49) expressionList -> . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    PARDER          shift and go to state 111
    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expressionList                 shift and go to state 110
    expression                     shift and go to state 54
    listArray                      shift and go to state 43

state 75

    (71) listArray -> ID CORIZQ . expression CORDER
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 112
    listArray                      shift and go to state 43

state 76

    (35) interfacecreation -> INTERFACE ID LLAVEIZQ . attributeList LLAVEDER PUNTOCOMA
    (36) attributeList -> . attributeList ID DOSPTS type PUNTOCOMA
    (37) attributeList -> . ID DOSPTS type PUNTOCOMA

    ID              shift and go to state 113

    attributeList                  shift and go to state 114

state 77

    (17) print -> CONSOLE PUNTO LOG PARIZQ . expressionList PARDER PUNTOCOMA
    (48) expressionList -> . expressionList COMA expression
    (49) expressionList -> . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expressionList                 shift and go to state 115
    expression                     shift and go to state 54
    listArray                      shift and go to state 43

state 78

    (18) ifinstruction -> IF PARIZQ expression PARDER . LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> IF PARIZQ expression PARDER . LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> IF PARIZQ expression PARDER . LLAVEIZQ block LLAVEDER

    LLAVEIZQ        shift and go to state 116


state 79

    (21) whileinstruction -> WHILE PARIZQ expression PARDER . LLAVEIZQ block LLAVEDER

    LLAVEIZQ        shift and go to state 117


state 80

    (24) interdeclaration -> VAR ID DOSPTS ID . IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    IGUAL           shift and go to state 118


state 81

    (22) declaration -> VAR ID DOSPTS type . IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> VAR ID DOSPTS type . CORIZQ CORDER IGUAL expression PUNTOCOMA

    IGUAL           shift and go to state 119
    CORIZQ          shift and go to state 120


state 82

    (44) type -> NUMBER .

    IGUAL           reduce using rule 44 (type -> NUMBER .)
    CORIZQ          reduce using rule 44 (type -> NUMBER .)
    LLAVEIZQ        reduce using rule 44 (type -> NUMBER .)
    PARDER          reduce using rule 44 (type -> NUMBER .)
    COMA            reduce using rule 44 (type -> NUMBER .)
    PUNTOCOMA       reduce using rule 44 (type -> NUMBER .)


state 83

    (45) type -> FLOAT .

    IGUAL           reduce using rule 45 (type -> FLOAT .)
    CORIZQ          reduce using rule 45 (type -> FLOAT .)
    LLAVEIZQ        reduce using rule 45 (type -> FLOAT .)
    PARDER          reduce using rule 45 (type -> FLOAT .)
    COMA            reduce using rule 45 (type -> FLOAT .)
    PUNTOCOMA       reduce using rule 45 (type -> FLOAT .)


state 84

    (46) type -> STRING .

    IGUAL           reduce using rule 46 (type -> STRING .)
    CORIZQ          reduce using rule 46 (type -> STRING .)
    LLAVEIZQ        reduce using rule 46 (type -> STRING .)
    PARDER          reduce using rule 46 (type -> STRING .)
    COMA            reduce using rule 46 (type -> STRING .)
    PUNTOCOMA       reduce using rule 46 (type -> STRING .)


state 85

    (47) type -> BOOL .

    IGUAL           reduce using rule 47 (type -> BOOL .)
    CORIZQ          reduce using rule 47 (type -> BOOL .)
    LLAVEIZQ        reduce using rule 47 (type -> BOOL .)
    PARDER          reduce using rule 47 (type -> BOOL .)
    COMA            reduce using rule 47 (type -> BOOL .)
    PUNTOCOMA       reduce using rule 47 (type -> BOOL .)


state 86

    (27) assignment -> ID IGUAL expression PUNTOCOMA .

    CONSOLE         reduce using rule 27 (assignment -> ID IGUAL expression PUNTOCOMA .)
    IF              reduce using rule 27 (assignment -> ID IGUAL expression PUNTOCOMA .)
    WHILE           reduce using rule 27 (assignment -> ID IGUAL expression PUNTOCOMA .)
    VAR             reduce using rule 27 (assignment -> ID IGUAL expression PUNTOCOMA .)
    ID              reduce using rule 27 (assignment -> ID IGUAL expression PUNTOCOMA .)
    BREAK           reduce using rule 27 (assignment -> ID IGUAL expression PUNTOCOMA .)
    CONTINUE        reduce using rule 27 (assignment -> ID IGUAL expression PUNTOCOMA .)
    FUNC            reduce using rule 27 (assignment -> ID IGUAL expression PUNTOCOMA .)
    RETURN          reduce using rule 27 (assignment -> ID IGUAL expression PUNTOCOMA .)
    INTERFACE       reduce using rule 27 (assignment -> ID IGUAL expression PUNTOCOMA .)
    $end            reduce using rule 27 (assignment -> ID IGUAL expression PUNTOCOMA .)
    LLAVEDER        reduce using rule 27 (assignment -> ID IGUAL expression PUNTOCOMA .)


state 87

    (30) call -> ID PARIZQ expressionList PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 121


state 88

    (48) expressionList -> expressionList COMA . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 122
    listArray                      shift and go to state 43

state 89

    (31) call -> ID PARIZQ PARDER PUNTOCOMA .

    CONSOLE         reduce using rule 31 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    IF              reduce using rule 31 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    WHILE           reduce using rule 31 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    VAR             reduce using rule 31 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    ID              reduce using rule 31 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    BREAK           reduce using rule 31 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    CONTINUE        reduce using rule 31 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    FUNC            reduce using rule 31 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    RETURN          reduce using rule 31 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    INTERFACE       reduce using rule 31 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    $end            reduce using rule 31 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    LLAVEDER        reduce using rule 31 (call -> ID PARIZQ PARDER PUNTOCOMA .)


state 90

    (32) functionstmt -> FUNC ID funcparams functype . LLAVEIZQ block LLAVEDER

    LLAVEIZQ        shift and go to state 123


state 91

    (40) functype -> DOSPTS . type
    (44) type -> . NUMBER
    (45) type -> . FLOAT
    (46) type -> . STRING
    (47) type -> . BOOL

    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    BOOL            shift and go to state 85

    type                           shift and go to state 124

state 92

    (33) funcparams -> PARIZQ paramsList . PARDER
    (38) paramsList -> paramsList . COMA ID DOSPTS type

    PARDER          shift and go to state 125
    COMA            shift and go to state 126


state 93

    (34) funcparams -> PARIZQ PARDER .

    DOSPTS          reduce using rule 34 (funcparams -> PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 34 (funcparams -> PARIZQ PARDER .)


state 94

    (39) paramsList -> ID . DOSPTS type

    DOSPTS          shift and go to state 127


state 95

    (50) expression -> expression MAS expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       reduce using rule 50 (expression -> expression MAS expression .)
    MAS             reduce using rule 50 (expression -> expression MAS expression .)
    MENOS           reduce using rule 50 (expression -> expression MAS expression .)
    MAYOR           reduce using rule 50 (expression -> expression MAS expression .)
    MENOR           reduce using rule 50 (expression -> expression MAS expression .)
    MAYORIG         reduce using rule 50 (expression -> expression MAS expression .)
    MENORIG         reduce using rule 50 (expression -> expression MAS expression .)
    IGUALDAD        reduce using rule 50 (expression -> expression MAS expression .)
    DIF             reduce using rule 50 (expression -> expression MAS expression .)
    AND             reduce using rule 50 (expression -> expression MAS expression .)
    OR              reduce using rule 50 (expression -> expression MAS expression .)
    TERN            reduce using rule 50 (expression -> expression MAS expression .)
    PARDER          reduce using rule 50 (expression -> expression MAS expression .)
    COMA            reduce using rule 50 (expression -> expression MAS expression .)
    CORDER          reduce using rule 50 (expression -> expression MAS expression .)
    DOSPTS          reduce using rule 50 (expression -> expression MAS expression .)
    LLAVEDER        reduce using rule 50 (expression -> expression MAS expression .)
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61

  ! POR             [ reduce using rule 50 (expression -> expression MAS expression .) ]
  ! DIVIDIDO        [ reduce using rule 50 (expression -> expression MAS expression .) ]
  ! MAS             [ shift and go to state 58 ]
  ! MENOS           [ shift and go to state 59 ]
  ! MAYOR           [ shift and go to state 62 ]
  ! MENOR           [ shift and go to state 63 ]
  ! MAYORIG         [ shift and go to state 64 ]
  ! MENORIG         [ shift and go to state 65 ]
  ! IGUALDAD        [ shift and go to state 66 ]
  ! DIF             [ shift and go to state 67 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 69 ]
  ! TERN            [ shift and go to state 70 ]


state 96

    (51) expression -> expression MENOS expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       reduce using rule 51 (expression -> expression MENOS expression .)
    MAS             reduce using rule 51 (expression -> expression MENOS expression .)
    MENOS           reduce using rule 51 (expression -> expression MENOS expression .)
    MAYOR           reduce using rule 51 (expression -> expression MENOS expression .)
    MENOR           reduce using rule 51 (expression -> expression MENOS expression .)
    MAYORIG         reduce using rule 51 (expression -> expression MENOS expression .)
    MENORIG         reduce using rule 51 (expression -> expression MENOS expression .)
    IGUALDAD        reduce using rule 51 (expression -> expression MENOS expression .)
    DIF             reduce using rule 51 (expression -> expression MENOS expression .)
    AND             reduce using rule 51 (expression -> expression MENOS expression .)
    OR              reduce using rule 51 (expression -> expression MENOS expression .)
    TERN            reduce using rule 51 (expression -> expression MENOS expression .)
    PARDER          reduce using rule 51 (expression -> expression MENOS expression .)
    COMA            reduce using rule 51 (expression -> expression MENOS expression .)
    CORDER          reduce using rule 51 (expression -> expression MENOS expression .)
    DOSPTS          reduce using rule 51 (expression -> expression MENOS expression .)
    LLAVEDER        reduce using rule 51 (expression -> expression MENOS expression .)
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61

  ! POR             [ reduce using rule 51 (expression -> expression MENOS expression .) ]
  ! DIVIDIDO        [ reduce using rule 51 (expression -> expression MENOS expression .) ]
  ! MAS             [ shift and go to state 58 ]
  ! MENOS           [ shift and go to state 59 ]
  ! MAYOR           [ shift and go to state 62 ]
  ! MENOR           [ shift and go to state 63 ]
  ! MAYORIG         [ shift and go to state 64 ]
  ! MENORIG         [ shift and go to state 65 ]
  ! IGUALDAD        [ shift and go to state 66 ]
  ! DIF             [ shift and go to state 67 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 69 ]
  ! TERN            [ shift and go to state 70 ]


state 97

    (52) expression -> expression POR expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       reduce using rule 52 (expression -> expression POR expression .)
    MAS             reduce using rule 52 (expression -> expression POR expression .)
    MENOS           reduce using rule 52 (expression -> expression POR expression .)
    POR             reduce using rule 52 (expression -> expression POR expression .)
    DIVIDIDO        reduce using rule 52 (expression -> expression POR expression .)
    MAYOR           reduce using rule 52 (expression -> expression POR expression .)
    MENOR           reduce using rule 52 (expression -> expression POR expression .)
    MAYORIG         reduce using rule 52 (expression -> expression POR expression .)
    MENORIG         reduce using rule 52 (expression -> expression POR expression .)
    IGUALDAD        reduce using rule 52 (expression -> expression POR expression .)
    DIF             reduce using rule 52 (expression -> expression POR expression .)
    AND             reduce using rule 52 (expression -> expression POR expression .)
    OR              reduce using rule 52 (expression -> expression POR expression .)
    TERN            reduce using rule 52 (expression -> expression POR expression .)
    PARDER          reduce using rule 52 (expression -> expression POR expression .)
    COMA            reduce using rule 52 (expression -> expression POR expression .)
    CORDER          reduce using rule 52 (expression -> expression POR expression .)
    DOSPTS          reduce using rule 52 (expression -> expression POR expression .)
    LLAVEDER        reduce using rule 52 (expression -> expression POR expression .)

  ! MAS             [ shift and go to state 58 ]
  ! MENOS           [ shift and go to state 59 ]
  ! POR             [ shift and go to state 60 ]
  ! DIVIDIDO        [ shift and go to state 61 ]
  ! MAYOR           [ shift and go to state 62 ]
  ! MENOR           [ shift and go to state 63 ]
  ! MAYORIG         [ shift and go to state 64 ]
  ! MENORIG         [ shift and go to state 65 ]
  ! IGUALDAD        [ shift and go to state 66 ]
  ! DIF             [ shift and go to state 67 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 69 ]
  ! TERN            [ shift and go to state 70 ]


state 98

    (53) expression -> expression DIVIDIDO expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    MAS             reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    MENOS           reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    POR             reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    DIVIDIDO        reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    MAYOR           reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    MENOR           reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    MAYORIG         reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    MENORIG         reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    IGUALDAD        reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    DIF             reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    AND             reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    OR              reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    TERN            reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    PARDER          reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    COMA            reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    CORDER          reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    DOSPTS          reduce using rule 53 (expression -> expression DIVIDIDO expression .)
    LLAVEDER        reduce using rule 53 (expression -> expression DIVIDIDO expression .)

  ! MAS             [ shift and go to state 58 ]
  ! MENOS           [ shift and go to state 59 ]
  ! POR             [ shift and go to state 60 ]
  ! DIVIDIDO        [ shift and go to state 61 ]
  ! MAYOR           [ shift and go to state 62 ]
  ! MENOR           [ shift and go to state 63 ]
  ! MAYORIG         [ shift and go to state 64 ]
  ! MENORIG         [ shift and go to state 65 ]
  ! IGUALDAD        [ shift and go to state 66 ]
  ! DIF             [ shift and go to state 67 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 69 ]
  ! TERN            [ shift and go to state 70 ]


state 99

    (54) expression -> expression MAYOR expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       reduce using rule 54 (expression -> expression MAYOR expression .)
    MAYOR           reduce using rule 54 (expression -> expression MAYOR expression .)
    MENOR           reduce using rule 54 (expression -> expression MAYOR expression .)
    IGUALDAD        reduce using rule 54 (expression -> expression MAYOR expression .)
    DIF             reduce using rule 54 (expression -> expression MAYOR expression .)
    AND             reduce using rule 54 (expression -> expression MAYOR expression .)
    OR              reduce using rule 54 (expression -> expression MAYOR expression .)
    TERN            reduce using rule 54 (expression -> expression MAYOR expression .)
    PARDER          reduce using rule 54 (expression -> expression MAYOR expression .)
    COMA            reduce using rule 54 (expression -> expression MAYOR expression .)
    CORDER          reduce using rule 54 (expression -> expression MAYOR expression .)
    DOSPTS          reduce using rule 54 (expression -> expression MAYOR expression .)
    LLAVEDER        reduce using rule 54 (expression -> expression MAYOR expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65

  ! MAS             [ reduce using rule 54 (expression -> expression MAYOR expression .) ]
  ! MENOS           [ reduce using rule 54 (expression -> expression MAYOR expression .) ]
  ! POR             [ reduce using rule 54 (expression -> expression MAYOR expression .) ]
  ! DIVIDIDO        [ reduce using rule 54 (expression -> expression MAYOR expression .) ]
  ! MAYORIG         [ reduce using rule 54 (expression -> expression MAYOR expression .) ]
  ! MENORIG         [ reduce using rule 54 (expression -> expression MAYOR expression .) ]
  ! MAYOR           [ shift and go to state 62 ]
  ! MENOR           [ shift and go to state 63 ]
  ! IGUALDAD        [ shift and go to state 66 ]
  ! DIF             [ shift and go to state 67 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 69 ]
  ! TERN            [ shift and go to state 70 ]


state 100

    (55) expression -> expression MENOR expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       reduce using rule 55 (expression -> expression MENOR expression .)
    MAYOR           reduce using rule 55 (expression -> expression MENOR expression .)
    MENOR           reduce using rule 55 (expression -> expression MENOR expression .)
    IGUALDAD        reduce using rule 55 (expression -> expression MENOR expression .)
    DIF             reduce using rule 55 (expression -> expression MENOR expression .)
    AND             reduce using rule 55 (expression -> expression MENOR expression .)
    OR              reduce using rule 55 (expression -> expression MENOR expression .)
    TERN            reduce using rule 55 (expression -> expression MENOR expression .)
    PARDER          reduce using rule 55 (expression -> expression MENOR expression .)
    COMA            reduce using rule 55 (expression -> expression MENOR expression .)
    CORDER          reduce using rule 55 (expression -> expression MENOR expression .)
    DOSPTS          reduce using rule 55 (expression -> expression MENOR expression .)
    LLAVEDER        reduce using rule 55 (expression -> expression MENOR expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65

  ! MAS             [ reduce using rule 55 (expression -> expression MENOR expression .) ]
  ! MENOS           [ reduce using rule 55 (expression -> expression MENOR expression .) ]
  ! POR             [ reduce using rule 55 (expression -> expression MENOR expression .) ]
  ! DIVIDIDO        [ reduce using rule 55 (expression -> expression MENOR expression .) ]
  ! MAYORIG         [ reduce using rule 55 (expression -> expression MENOR expression .) ]
  ! MENORIG         [ reduce using rule 55 (expression -> expression MENOR expression .) ]
  ! MAYOR           [ shift and go to state 62 ]
  ! MENOR           [ shift and go to state 63 ]
  ! IGUALDAD        [ shift and go to state 66 ]
  ! DIF             [ shift and go to state 67 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 69 ]
  ! TERN            [ shift and go to state 70 ]


state 101

    (56) expression -> expression MAYORIG expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       reduce using rule 56 (expression -> expression MAYORIG expression .)
    MAYOR           reduce using rule 56 (expression -> expression MAYORIG expression .)
    MENOR           reduce using rule 56 (expression -> expression MAYORIG expression .)
    MAYORIG         reduce using rule 56 (expression -> expression MAYORIG expression .)
    MENORIG         reduce using rule 56 (expression -> expression MAYORIG expression .)
    IGUALDAD        reduce using rule 56 (expression -> expression MAYORIG expression .)
    DIF             reduce using rule 56 (expression -> expression MAYORIG expression .)
    AND             reduce using rule 56 (expression -> expression MAYORIG expression .)
    OR              reduce using rule 56 (expression -> expression MAYORIG expression .)
    TERN            reduce using rule 56 (expression -> expression MAYORIG expression .)
    PARDER          reduce using rule 56 (expression -> expression MAYORIG expression .)
    COMA            reduce using rule 56 (expression -> expression MAYORIG expression .)
    CORDER          reduce using rule 56 (expression -> expression MAYORIG expression .)
    DOSPTS          reduce using rule 56 (expression -> expression MAYORIG expression .)
    LLAVEDER        reduce using rule 56 (expression -> expression MAYORIG expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61

  ! MAS             [ reduce using rule 56 (expression -> expression MAYORIG expression .) ]
  ! MENOS           [ reduce using rule 56 (expression -> expression MAYORIG expression .) ]
  ! POR             [ reduce using rule 56 (expression -> expression MAYORIG expression .) ]
  ! DIVIDIDO        [ reduce using rule 56 (expression -> expression MAYORIG expression .) ]
  ! MAYOR           [ shift and go to state 62 ]
  ! MENOR           [ shift and go to state 63 ]
  ! MAYORIG         [ shift and go to state 64 ]
  ! MENORIG         [ shift and go to state 65 ]
  ! IGUALDAD        [ shift and go to state 66 ]
  ! DIF             [ shift and go to state 67 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 69 ]
  ! TERN            [ shift and go to state 70 ]


state 102

    (57) expression -> expression MENORIG expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       reduce using rule 57 (expression -> expression MENORIG expression .)
    MAYOR           reduce using rule 57 (expression -> expression MENORIG expression .)
    MENOR           reduce using rule 57 (expression -> expression MENORIG expression .)
    MAYORIG         reduce using rule 57 (expression -> expression MENORIG expression .)
    MENORIG         reduce using rule 57 (expression -> expression MENORIG expression .)
    IGUALDAD        reduce using rule 57 (expression -> expression MENORIG expression .)
    DIF             reduce using rule 57 (expression -> expression MENORIG expression .)
    AND             reduce using rule 57 (expression -> expression MENORIG expression .)
    OR              reduce using rule 57 (expression -> expression MENORIG expression .)
    TERN            reduce using rule 57 (expression -> expression MENORIG expression .)
    PARDER          reduce using rule 57 (expression -> expression MENORIG expression .)
    COMA            reduce using rule 57 (expression -> expression MENORIG expression .)
    CORDER          reduce using rule 57 (expression -> expression MENORIG expression .)
    DOSPTS          reduce using rule 57 (expression -> expression MENORIG expression .)
    LLAVEDER        reduce using rule 57 (expression -> expression MENORIG expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61

  ! MAS             [ reduce using rule 57 (expression -> expression MENORIG expression .) ]
  ! MENOS           [ reduce using rule 57 (expression -> expression MENORIG expression .) ]
  ! POR             [ reduce using rule 57 (expression -> expression MENORIG expression .) ]
  ! DIVIDIDO        [ reduce using rule 57 (expression -> expression MENORIG expression .) ]
  ! MAYOR           [ shift and go to state 62 ]
  ! MENOR           [ shift and go to state 63 ]
  ! MAYORIG         [ shift and go to state 64 ]
  ! MENORIG         [ shift and go to state 65 ]
  ! IGUALDAD        [ shift and go to state 66 ]
  ! DIF             [ shift and go to state 67 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 69 ]
  ! TERN            [ shift and go to state 70 ]


state 103

    (58) expression -> expression IGUALDAD expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for IGUALDAD resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for TERN resolved as shift
    PUNTOCOMA       reduce using rule 58 (expression -> expression IGUALDAD expression .)
    PARDER          reduce using rule 58 (expression -> expression IGUALDAD expression .)
    COMA            reduce using rule 58 (expression -> expression IGUALDAD expression .)
    CORDER          reduce using rule 58 (expression -> expression IGUALDAD expression .)
    DOSPTS          reduce using rule 58 (expression -> expression IGUALDAD expression .)
    LLAVEDER        reduce using rule 58 (expression -> expression IGUALDAD expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70

  ! MAS             [ reduce using rule 58 (expression -> expression IGUALDAD expression .) ]
  ! MENOS           [ reduce using rule 58 (expression -> expression IGUALDAD expression .) ]
  ! POR             [ reduce using rule 58 (expression -> expression IGUALDAD expression .) ]
  ! DIVIDIDO        [ reduce using rule 58 (expression -> expression IGUALDAD expression .) ]
  ! MAYOR           [ reduce using rule 58 (expression -> expression IGUALDAD expression .) ]
  ! MENOR           [ reduce using rule 58 (expression -> expression IGUALDAD expression .) ]
  ! MAYORIG         [ reduce using rule 58 (expression -> expression IGUALDAD expression .) ]
  ! MENORIG         [ reduce using rule 58 (expression -> expression IGUALDAD expression .) ]
  ! IGUALDAD        [ reduce using rule 58 (expression -> expression IGUALDAD expression .) ]
  ! DIF             [ reduce using rule 58 (expression -> expression IGUALDAD expression .) ]
  ! AND             [ reduce using rule 58 (expression -> expression IGUALDAD expression .) ]
  ! OR              [ reduce using rule 58 (expression -> expression IGUALDAD expression .) ]
  ! TERN            [ reduce using rule 58 (expression -> expression IGUALDAD expression .) ]


state 104

    (59) expression -> expression DIF expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for IGUALDAD resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for TERN resolved as shift
    PUNTOCOMA       reduce using rule 59 (expression -> expression DIF expression .)
    PARDER          reduce using rule 59 (expression -> expression DIF expression .)
    COMA            reduce using rule 59 (expression -> expression DIF expression .)
    CORDER          reduce using rule 59 (expression -> expression DIF expression .)
    DOSPTS          reduce using rule 59 (expression -> expression DIF expression .)
    LLAVEDER        reduce using rule 59 (expression -> expression DIF expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70

  ! MAS             [ reduce using rule 59 (expression -> expression DIF expression .) ]
  ! MENOS           [ reduce using rule 59 (expression -> expression DIF expression .) ]
  ! POR             [ reduce using rule 59 (expression -> expression DIF expression .) ]
  ! DIVIDIDO        [ reduce using rule 59 (expression -> expression DIF expression .) ]
  ! MAYOR           [ reduce using rule 59 (expression -> expression DIF expression .) ]
  ! MENOR           [ reduce using rule 59 (expression -> expression DIF expression .) ]
  ! MAYORIG         [ reduce using rule 59 (expression -> expression DIF expression .) ]
  ! MENORIG         [ reduce using rule 59 (expression -> expression DIF expression .) ]
  ! IGUALDAD        [ reduce using rule 59 (expression -> expression DIF expression .) ]
  ! DIF             [ reduce using rule 59 (expression -> expression DIF expression .) ]
  ! AND             [ reduce using rule 59 (expression -> expression DIF expression .) ]
  ! OR              [ reduce using rule 59 (expression -> expression DIF expression .) ]
  ! TERN            [ reduce using rule 59 (expression -> expression DIF expression .) ]


state 105

    (60) expression -> expression AND expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       reduce using rule 60 (expression -> expression AND expression .)
    IGUALDAD        reduce using rule 60 (expression -> expression AND expression .)
    DIF             reduce using rule 60 (expression -> expression AND expression .)
    AND             reduce using rule 60 (expression -> expression AND expression .)
    OR              reduce using rule 60 (expression -> expression AND expression .)
    TERN            reduce using rule 60 (expression -> expression AND expression .)
    PARDER          reduce using rule 60 (expression -> expression AND expression .)
    COMA            reduce using rule 60 (expression -> expression AND expression .)
    CORDER          reduce using rule 60 (expression -> expression AND expression .)
    DOSPTS          reduce using rule 60 (expression -> expression AND expression .)
    LLAVEDER        reduce using rule 60 (expression -> expression AND expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65

  ! MAS             [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! MENOS           [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! POR             [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! DIVIDIDO        [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! MAYOR           [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! MENOR           [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! MAYORIG         [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! MENORIG         [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! IGUALDAD        [ shift and go to state 66 ]
  ! DIF             [ shift and go to state 67 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 69 ]
  ! TERN            [ shift and go to state 70 ]


state 106

    (61) expression -> expression OR expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       reduce using rule 61 (expression -> expression OR expression .)
    IGUALDAD        reduce using rule 61 (expression -> expression OR expression .)
    DIF             reduce using rule 61 (expression -> expression OR expression .)
    OR              reduce using rule 61 (expression -> expression OR expression .)
    TERN            reduce using rule 61 (expression -> expression OR expression .)
    PARDER          reduce using rule 61 (expression -> expression OR expression .)
    COMA            reduce using rule 61 (expression -> expression OR expression .)
    CORDER          reduce using rule 61 (expression -> expression OR expression .)
    DOSPTS          reduce using rule 61 (expression -> expression OR expression .)
    LLAVEDER        reduce using rule 61 (expression -> expression OR expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    AND             shift and go to state 68

  ! MAS             [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! MENOS           [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! POR             [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! DIVIDIDO        [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! MAYOR           [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! MENOR           [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! MAYORIG         [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! MENORIG         [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! IGUALDAD        [ shift and go to state 66 ]
  ! DIF             [ shift and go to state 67 ]
  ! OR              [ shift and go to state 69 ]
  ! TERN            [ shift and go to state 70 ]


state 107

    (64) expression -> expression TERN expression . DOSPTS expression
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    DOSPTS          shift and go to state 128
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70


state 108

    (63) expression -> PARIZQ expression PARDER .

    PUNTOCOMA       reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    MAS             reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    MENOS           reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    POR             reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    MAYOR           reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    MENOR           reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    MAYORIG         reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    MENORIG         reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    IGUALDAD        reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    DIF             reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    AND             reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    OR              reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    TERN            reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    PARDER          reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    COMA            reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    CORDER          reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    DOSPTS          reduce using rule 63 (expression -> PARIZQ expression PARDER .)
    LLAVEDER        reduce using rule 63 (expression -> PARIZQ expression PARDER .)


state 109

    (68) expression -> CORIZQ expressionList CORDER .

    PUNTOCOMA       reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    MAS             reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    MENOS           reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    POR             reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    DIVIDIDO        reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    MAYOR           reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    MENOR           reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    MAYORIG         reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    MENORIG         reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    IGUALDAD        reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    DIF             reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    AND             reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    OR              reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    TERN            reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    PARDER          reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    COMA            reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    CORDER          reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    DOSPTS          reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)
    LLAVEDER        reduce using rule 68 (expression -> CORIZQ expressionList CORDER .)


state 110

    (69) expression -> ID PARIZQ expressionList . PARDER
    (48) expressionList -> expressionList . COMA expression

    PARDER          shift and go to state 129
    COMA            shift and go to state 88


state 111

    (70) expression -> ID PARIZQ PARDER .

    PUNTOCOMA       reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    MAS             reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    MENOS           reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    POR             reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    MAYOR           reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    MENOR           reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    MAYORIG         reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    MENORIG         reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    IGUALDAD        reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    DIF             reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    AND             reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    OR              reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    TERN            reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    PARDER          reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    COMA            reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    CORDER          reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    DOSPTS          reduce using rule 70 (expression -> ID PARIZQ PARDER .)
    LLAVEDER        reduce using rule 70 (expression -> ID PARIZQ PARDER .)


state 112

    (71) listArray -> ID CORIZQ expression . CORDER
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    CORDER          shift and go to state 130
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70


state 113

    (37) attributeList -> ID . DOSPTS type PUNTOCOMA

    DOSPTS          shift and go to state 131


state 114

    (35) interfacecreation -> INTERFACE ID LLAVEIZQ attributeList . LLAVEDER PUNTOCOMA
    (36) attributeList -> attributeList . ID DOSPTS type PUNTOCOMA

    LLAVEDER        shift and go to state 133
    ID              shift and go to state 132


state 115

    (17) print -> CONSOLE PUNTO LOG PARIZQ expressionList . PARDER PUNTOCOMA
    (48) expressionList -> expressionList . COMA expression

    PARDER          shift and go to state 134
    COMA            shift and go to state 88


state 116

    (18) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ . block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ . block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ . block LLAVEDER
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . assignment
    (10) instruccion -> . breakstmt
    (11) instruccion -> . continuestmt
    (12) instruccion -> . functionstmt
    (13) instruccion -> . call
    (14) instruccion -> . returnstmt
    (15) instruccion -> . interfacecreation
    (16) instruccion -> . interdeclaration
    (17) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (18) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (21) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (22) declaration -> . VAR ID DOSPTS type IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (27) assignment -> . ID IGUAL expression PUNTOCOMA
    (42) breakstmt -> . BREAK PUNTOCOMA
    (43) continuestmt -> . CONTINUE PUNTOCOMA
    (32) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (30) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (31) call -> . ID PARIZQ PARDER PUNTOCOMA
    (28) returnstmt -> . RETURN expression PUNTOCOMA
    (29) returnstmt -> . RETURN PUNTOCOMA
    (35) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (24) interdeclaration -> . VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    CONSOLE         shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    VAR             shift and go to state 20
    ID              shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    FUNC            shift and go to state 24
    RETURN          shift and go to state 25
    INTERFACE       shift and go to state 26

    block                          shift and go to state 135
    ifinstruction                  shift and go to state 5
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    assignment                     shift and go to state 9
    breakstmt                      shift and go to state 10
    continuestmt                   shift and go to state 11
    functionstmt                   shift and go to state 12
    call                           shift and go to state 13
    returnstmt                     shift and go to state 14
    interfacecreation              shift and go to state 15
    interdeclaration               shift and go to state 16

state 117

    (21) whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ . block LLAVEDER
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . assignment
    (10) instruccion -> . breakstmt
    (11) instruccion -> . continuestmt
    (12) instruccion -> . functionstmt
    (13) instruccion -> . call
    (14) instruccion -> . returnstmt
    (15) instruccion -> . interfacecreation
    (16) instruccion -> . interdeclaration
    (17) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (18) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (21) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (22) declaration -> . VAR ID DOSPTS type IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (27) assignment -> . ID IGUAL expression PUNTOCOMA
    (42) breakstmt -> . BREAK PUNTOCOMA
    (43) continuestmt -> . CONTINUE PUNTOCOMA
    (32) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (30) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (31) call -> . ID PARIZQ PARDER PUNTOCOMA
    (28) returnstmt -> . RETURN expression PUNTOCOMA
    (29) returnstmt -> . RETURN PUNTOCOMA
    (35) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (24) interdeclaration -> . VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    CONSOLE         shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    VAR             shift and go to state 20
    ID              shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    FUNC            shift and go to state 24
    RETURN          shift and go to state 25
    INTERFACE       shift and go to state 26

    block                          shift and go to state 136
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    assignment                     shift and go to state 9
    breakstmt                      shift and go to state 10
    continuestmt                   shift and go to state 11
    functionstmt                   shift and go to state 12
    call                           shift and go to state 13
    returnstmt                     shift and go to state 14
    interfacecreation              shift and go to state 15
    interdeclaration               shift and go to state 16

state 118

    (24) interdeclaration -> VAR ID DOSPTS ID IGUAL . LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    LLAVEIZQ        shift and go to state 137


state 119

    (22) declaration -> VAR ID DOSPTS type IGUAL . expression PUNTOCOMA
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 138
    listArray                      shift and go to state 43

state 120

    (23) arraydeclaration -> VAR ID DOSPTS type CORIZQ . CORDER IGUAL expression PUNTOCOMA

    CORDER          shift and go to state 139


state 121

    (30) call -> ID PARIZQ expressionList PARDER PUNTOCOMA .

    CONSOLE         reduce using rule 30 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    IF              reduce using rule 30 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    WHILE           reduce using rule 30 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    VAR             reduce using rule 30 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    ID              reduce using rule 30 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    BREAK           reduce using rule 30 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    CONTINUE        reduce using rule 30 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    FUNC            reduce using rule 30 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    RETURN          reduce using rule 30 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    INTERFACE       reduce using rule 30 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    $end            reduce using rule 30 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    LLAVEDER        reduce using rule 30 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)


state 122

    (48) expressionList -> expressionList COMA expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PARDER          reduce using rule 48 (expressionList -> expressionList COMA expression .)
    COMA            reduce using rule 48 (expressionList -> expressionList COMA expression .)
    CORDER          reduce using rule 48 (expressionList -> expressionList COMA expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70


state 123

    (32) functionstmt -> FUNC ID funcparams functype LLAVEIZQ . block LLAVEDER
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . assignment
    (10) instruccion -> . breakstmt
    (11) instruccion -> . continuestmt
    (12) instruccion -> . functionstmt
    (13) instruccion -> . call
    (14) instruccion -> . returnstmt
    (15) instruccion -> . interfacecreation
    (16) instruccion -> . interdeclaration
    (17) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (18) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (21) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (22) declaration -> . VAR ID DOSPTS type IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (27) assignment -> . ID IGUAL expression PUNTOCOMA
    (42) breakstmt -> . BREAK PUNTOCOMA
    (43) continuestmt -> . CONTINUE PUNTOCOMA
    (32) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (30) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (31) call -> . ID PARIZQ PARDER PUNTOCOMA
    (28) returnstmt -> . RETURN expression PUNTOCOMA
    (29) returnstmt -> . RETURN PUNTOCOMA
    (35) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (24) interdeclaration -> . VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    CONSOLE         shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    VAR             shift and go to state 20
    ID              shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    FUNC            shift and go to state 24
    RETURN          shift and go to state 25
    INTERFACE       shift and go to state 26

    block                          shift and go to state 140
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    assignment                     shift and go to state 9
    breakstmt                      shift and go to state 10
    continuestmt                   shift and go to state 11
    functionstmt                   shift and go to state 12
    call                           shift and go to state 13
    returnstmt                     shift and go to state 14
    interfacecreation              shift and go to state 15
    interdeclaration               shift and go to state 16

state 124

    (40) functype -> DOSPTS type .

    LLAVEIZQ        reduce using rule 40 (functype -> DOSPTS type .)


state 125

    (33) funcparams -> PARIZQ paramsList PARDER .

    DOSPTS          reduce using rule 33 (funcparams -> PARIZQ paramsList PARDER .)
    LLAVEIZQ        reduce using rule 33 (funcparams -> PARIZQ paramsList PARDER .)


state 126

    (38) paramsList -> paramsList COMA . ID DOSPTS type

    ID              shift and go to state 141


state 127

    (39) paramsList -> ID DOSPTS . type
    (44) type -> . NUMBER
    (45) type -> . FLOAT
    (46) type -> . STRING
    (47) type -> . BOOL

    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    BOOL            shift and go to state 85

    type                           shift and go to state 142

state 128

    (64) expression -> expression TERN expression DOSPTS . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 143
    listArray                      shift and go to state 43

state 129

    (69) expression -> ID PARIZQ expressionList PARDER .

    PUNTOCOMA       reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    MAS             reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    MENOS           reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    POR             reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    DIVIDIDO        reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    MAYOR           reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    MENOR           reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    MAYORIG         reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    MENORIG         reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    IGUALDAD        reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    DIF             reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    AND             reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    OR              reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    TERN            reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    PARDER          reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    COMA            reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    CORDER          reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    DOSPTS          reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)
    LLAVEDER        reduce using rule 69 (expression -> ID PARIZQ expressionList PARDER .)


state 130

    (71) listArray -> ID CORIZQ expression CORDER .

    PUNTOCOMA       reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    MAS             reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    MENOS           reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    POR             reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    DIVIDIDO        reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    MAYOR           reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    MENOR           reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    MAYORIG         reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    MENORIG         reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    IGUALDAD        reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    DIF             reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    AND             reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    OR              reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    TERN            reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    PARDER          reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    COMA            reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    CORDER          reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    DOSPTS          reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)
    LLAVEDER        reduce using rule 71 (listArray -> ID CORIZQ expression CORDER .)


state 131

    (37) attributeList -> ID DOSPTS . type PUNTOCOMA
    (44) type -> . NUMBER
    (45) type -> . FLOAT
    (46) type -> . STRING
    (47) type -> . BOOL

    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    BOOL            shift and go to state 85

    type                           shift and go to state 144

state 132

    (36) attributeList -> attributeList ID . DOSPTS type PUNTOCOMA

    DOSPTS          shift and go to state 145


state 133

    (35) interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 146


state 134

    (17) print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 147


state 135

    (18) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block . LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block . LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block . LLAVEDER
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . assignment
    (10) instruccion -> . breakstmt
    (11) instruccion -> . continuestmt
    (12) instruccion -> . functionstmt
    (13) instruccion -> . call
    (14) instruccion -> . returnstmt
    (15) instruccion -> . interfacecreation
    (16) instruccion -> . interdeclaration
    (17) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (18) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (21) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (22) declaration -> . VAR ID DOSPTS type IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (27) assignment -> . ID IGUAL expression PUNTOCOMA
    (42) breakstmt -> . BREAK PUNTOCOMA
    (43) continuestmt -> . CONTINUE PUNTOCOMA
    (32) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (30) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (31) call -> . ID PARIZQ PARDER PUNTOCOMA
    (28) returnstmt -> . RETURN expression PUNTOCOMA
    (29) returnstmt -> . RETURN PUNTOCOMA
    (35) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (24) interdeclaration -> . VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    LLAVEDER        shift and go to state 148
    CONSOLE         shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    VAR             shift and go to state 20
    ID              shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    FUNC            shift and go to state 24
    RETURN          shift and go to state 25
    INTERFACE       shift and go to state 26

    ifinstruction                  shift and go to state 5
    instruccion                    shift and go to state 27
    print                          shift and go to state 4
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    assignment                     shift and go to state 9
    breakstmt                      shift and go to state 10
    continuestmt                   shift and go to state 11
    functionstmt                   shift and go to state 12
    call                           shift and go to state 13
    returnstmt                     shift and go to state 14
    interfacecreation              shift and go to state 15
    interdeclaration               shift and go to state 16

state 136

    (21) whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block . LLAVEDER
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . assignment
    (10) instruccion -> . breakstmt
    (11) instruccion -> . continuestmt
    (12) instruccion -> . functionstmt
    (13) instruccion -> . call
    (14) instruccion -> . returnstmt
    (15) instruccion -> . interfacecreation
    (16) instruccion -> . interdeclaration
    (17) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (18) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (21) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (22) declaration -> . VAR ID DOSPTS type IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (27) assignment -> . ID IGUAL expression PUNTOCOMA
    (42) breakstmt -> . BREAK PUNTOCOMA
    (43) continuestmt -> . CONTINUE PUNTOCOMA
    (32) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (30) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (31) call -> . ID PARIZQ PARDER PUNTOCOMA
    (28) returnstmt -> . RETURN expression PUNTOCOMA
    (29) returnstmt -> . RETURN PUNTOCOMA
    (35) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (24) interdeclaration -> . VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    LLAVEDER        shift and go to state 149
    CONSOLE         shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    VAR             shift and go to state 20
    ID              shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    FUNC            shift and go to state 24
    RETURN          shift and go to state 25
    INTERFACE       shift and go to state 26

    instruccion                    shift and go to state 27
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    assignment                     shift and go to state 9
    breakstmt                      shift and go to state 10
    continuestmt                   shift and go to state 11
    functionstmt                   shift and go to state 12
    call                           shift and go to state 13
    returnstmt                     shift and go to state 14
    interfacecreation              shift and go to state 15
    interdeclaration               shift and go to state 16

state 137

    (24) interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ . interfaceContent LLAVEDER PUNTOCOMA
    (25) interfaceContent -> . interfaceContent COMA ID DOSPTS expression
    (26) interfaceContent -> . ID DOSPTS expression

    ID              shift and go to state 150

    interfaceContent               shift and go to state 151

state 138

    (22) declaration -> VAR ID DOSPTS type IGUAL expression . PUNTOCOMA
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       shift and go to state 152
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70


state 139

    (23) arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER . IGUAL expression PUNTOCOMA

    IGUAL           shift and go to state 153


state 140

    (32) functionstmt -> FUNC ID funcparams functype LLAVEIZQ block . LLAVEDER
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . assignment
    (10) instruccion -> . breakstmt
    (11) instruccion -> . continuestmt
    (12) instruccion -> . functionstmt
    (13) instruccion -> . call
    (14) instruccion -> . returnstmt
    (15) instruccion -> . interfacecreation
    (16) instruccion -> . interdeclaration
    (17) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (18) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (21) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (22) declaration -> . VAR ID DOSPTS type IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (27) assignment -> . ID IGUAL expression PUNTOCOMA
    (42) breakstmt -> . BREAK PUNTOCOMA
    (43) continuestmt -> . CONTINUE PUNTOCOMA
    (32) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (30) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (31) call -> . ID PARIZQ PARDER PUNTOCOMA
    (28) returnstmt -> . RETURN expression PUNTOCOMA
    (29) returnstmt -> . RETURN PUNTOCOMA
    (35) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (24) interdeclaration -> . VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    LLAVEDER        shift and go to state 154
    CONSOLE         shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    VAR             shift and go to state 20
    ID              shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    FUNC            shift and go to state 24
    RETURN          shift and go to state 25
    INTERFACE       shift and go to state 26

    instruccion                    shift and go to state 27
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    assignment                     shift and go to state 9
    breakstmt                      shift and go to state 10
    continuestmt                   shift and go to state 11
    functionstmt                   shift and go to state 12
    call                           shift and go to state 13
    returnstmt                     shift and go to state 14
    interfacecreation              shift and go to state 15
    interdeclaration               shift and go to state 16

state 141

    (38) paramsList -> paramsList COMA ID . DOSPTS type

    DOSPTS          shift and go to state 155


state 142

    (39) paramsList -> ID DOSPTS type .

    PARDER          reduce using rule 39 (paramsList -> ID DOSPTS type .)
    COMA            reduce using rule 39 (paramsList -> ID DOSPTS type .)


state 143

    (64) expression -> expression TERN expression DOSPTS expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for IGUALDAD resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for TERN resolved as shift
    PUNTOCOMA       reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .)
    PARDER          reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .)
    COMA            reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .)
    CORDER          reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .)
    DOSPTS          reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .)
    LLAVEDER        reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70

  ! MAS             [ reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .) ]
  ! MENOS           [ reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .) ]
  ! POR             [ reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .) ]
  ! DIVIDIDO        [ reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .) ]
  ! MAYOR           [ reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .) ]
  ! MENOR           [ reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .) ]
  ! MAYORIG         [ reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .) ]
  ! MENORIG         [ reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .) ]
  ! IGUALDAD        [ reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .) ]
  ! DIF             [ reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .) ]
  ! OR              [ reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .) ]
  ! TERN            [ reduce using rule 64 (expression -> expression TERN expression DOSPTS expression .) ]


state 144

    (37) attributeList -> ID DOSPTS type . PUNTOCOMA

    PUNTOCOMA       shift and go to state 156


state 145

    (36) attributeList -> attributeList ID DOSPTS . type PUNTOCOMA
    (44) type -> . NUMBER
    (45) type -> . FLOAT
    (46) type -> . STRING
    (47) type -> . BOOL

    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    BOOL            shift and go to state 85

    type                           shift and go to state 157

state 146

    (35) interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .

    CONSOLE         reduce using rule 35 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    IF              reduce using rule 35 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    WHILE           reduce using rule 35 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    VAR             reduce using rule 35 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    ID              reduce using rule 35 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    BREAK           reduce using rule 35 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    CONTINUE        reduce using rule 35 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    FUNC            reduce using rule 35 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    RETURN          reduce using rule 35 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    INTERFACE       reduce using rule 35 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    $end            reduce using rule 35 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    LLAVEDER        reduce using rule 35 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)


state 147

    (17) print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .

    CONSOLE         reduce using rule 17 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    IF              reduce using rule 17 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    WHILE           reduce using rule 17 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    VAR             reduce using rule 17 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    ID              reduce using rule 17 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    BREAK           reduce using rule 17 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    CONTINUE        reduce using rule 17 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    FUNC            reduce using rule 17 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    RETURN          reduce using rule 17 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    INTERFACE       reduce using rule 17 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    $end            reduce using rule 17 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    LLAVEDER        reduce using rule 17 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)


state 148

    (18) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER . ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER . ELSE ifinstruction
    (20) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .

    ELSE            shift and go to state 158
    CONSOLE         reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    INTERFACE       reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)


state 149

    (21) whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .

    CONSOLE         reduce using rule 21 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 21 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 21 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 21 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 21 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 21 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 21 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 21 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 21 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    INTERFACE       reduce using rule 21 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 21 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 21 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)


state 150

    (26) interfaceContent -> ID . DOSPTS expression

    DOSPTS          shift and go to state 159


state 151

    (24) interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent . LLAVEDER PUNTOCOMA
    (25) interfaceContent -> interfaceContent . COMA ID DOSPTS expression

    LLAVEDER        shift and go to state 160
    COMA            shift and go to state 161


state 152

    (22) declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA .

    CONSOLE         reduce using rule 22 (declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA .)
    IF              reduce using rule 22 (declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA .)
    WHILE           reduce using rule 22 (declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA .)
    VAR             reduce using rule 22 (declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA .)
    ID              reduce using rule 22 (declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA .)
    BREAK           reduce using rule 22 (declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA .)
    CONTINUE        reduce using rule 22 (declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA .)
    FUNC            reduce using rule 22 (declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA .)
    RETURN          reduce using rule 22 (declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA .)
    INTERFACE       reduce using rule 22 (declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA .)
    $end            reduce using rule 22 (declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA .)
    LLAVEDER        reduce using rule 22 (declaration -> VAR ID DOSPTS type IGUAL expression PUNTOCOMA .)


state 153

    (23) arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL . expression PUNTOCOMA
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 162
    listArray                      shift and go to state 43

state 154

    (32) functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .

    CONSOLE         reduce using rule 32 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 32 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 32 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 32 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 32 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 32 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 32 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 32 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 32 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    INTERFACE       reduce using rule 32 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 32 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 32 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)


state 155

    (38) paramsList -> paramsList COMA ID DOSPTS . type
    (44) type -> . NUMBER
    (45) type -> . FLOAT
    (46) type -> . STRING
    (47) type -> . BOOL

    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    BOOL            shift and go to state 85

    type                           shift and go to state 163

state 156

    (37) attributeList -> ID DOSPTS type PUNTOCOMA .

    LLAVEDER        reduce using rule 37 (attributeList -> ID DOSPTS type PUNTOCOMA .)
    ID              reduce using rule 37 (attributeList -> ID DOSPTS type PUNTOCOMA .)


state 157

    (36) attributeList -> attributeList ID DOSPTS type . PUNTOCOMA

    PUNTOCOMA       shift and go to state 164


state 158

    (18) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE . LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE . ifinstruction
    (18) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER

    LLAVEIZQ        shift and go to state 165
    IF              shift and go to state 18

    ifinstruction                  shift and go to state 166

state 159

    (26) interfaceContent -> ID DOSPTS . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 167
    listArray                      shift and go to state 43

state 160

    (24) interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 168


state 161

    (25) interfaceContent -> interfaceContent COMA . ID DOSPTS expression

    ID              shift and go to state 169


state 162

    (23) arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression . PUNTOCOMA
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    PUNTOCOMA       shift and go to state 170
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70


state 163

    (38) paramsList -> paramsList COMA ID DOSPTS type .

    PARDER          reduce using rule 38 (paramsList -> paramsList COMA ID DOSPTS type .)
    COMA            reduce using rule 38 (paramsList -> paramsList COMA ID DOSPTS type .)


state 164

    (36) attributeList -> attributeList ID DOSPTS type PUNTOCOMA .

    LLAVEDER        reduce using rule 36 (attributeList -> attributeList ID DOSPTS type PUNTOCOMA .)
    ID              reduce using rule 36 (attributeList -> attributeList ID DOSPTS type PUNTOCOMA .)


state 165

    (18) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ . block LLAVEDER
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . assignment
    (10) instruccion -> . breakstmt
    (11) instruccion -> . continuestmt
    (12) instruccion -> . functionstmt
    (13) instruccion -> . call
    (14) instruccion -> . returnstmt
    (15) instruccion -> . interfacecreation
    (16) instruccion -> . interdeclaration
    (17) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (18) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (21) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (22) declaration -> . VAR ID DOSPTS type IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (27) assignment -> . ID IGUAL expression PUNTOCOMA
    (42) breakstmt -> . BREAK PUNTOCOMA
    (43) continuestmt -> . CONTINUE PUNTOCOMA
    (32) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (30) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (31) call -> . ID PARIZQ PARDER PUNTOCOMA
    (28) returnstmt -> . RETURN expression PUNTOCOMA
    (29) returnstmt -> . RETURN PUNTOCOMA
    (35) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (24) interdeclaration -> . VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    CONSOLE         shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    VAR             shift and go to state 20
    ID              shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    FUNC            shift and go to state 24
    RETURN          shift and go to state 25
    INTERFACE       shift and go to state 26

    block                          shift and go to state 171
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    assignment                     shift and go to state 9
    breakstmt                      shift and go to state 10
    continuestmt                   shift and go to state 11
    functionstmt                   shift and go to state 12
    call                           shift and go to state 13
    returnstmt                     shift and go to state 14
    interfacecreation              shift and go to state 15
    interdeclaration               shift and go to state 16

state 166

    (19) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .

    CONSOLE         reduce using rule 19 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    IF              reduce using rule 19 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    WHILE           reduce using rule 19 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    VAR             reduce using rule 19 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    ID              reduce using rule 19 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    BREAK           reduce using rule 19 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    CONTINUE        reduce using rule 19 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    FUNC            reduce using rule 19 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    RETURN          reduce using rule 19 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    INTERFACE       reduce using rule 19 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    $end            reduce using rule 19 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    LLAVEDER        reduce using rule 19 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)


state 167

    (26) interfaceContent -> ID DOSPTS expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    LLAVEDER        reduce using rule 26 (interfaceContent -> ID DOSPTS expression .)
    COMA            reduce using rule 26 (interfaceContent -> ID DOSPTS expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70


state 168

    (24) interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .

    CONSOLE         reduce using rule 24 (interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    IF              reduce using rule 24 (interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    WHILE           reduce using rule 24 (interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    VAR             reduce using rule 24 (interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    ID              reduce using rule 24 (interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    BREAK           reduce using rule 24 (interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    CONTINUE        reduce using rule 24 (interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    FUNC            reduce using rule 24 (interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    RETURN          reduce using rule 24 (interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    INTERFACE       reduce using rule 24 (interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    $end            reduce using rule 24 (interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    LLAVEDER        reduce using rule 24 (interdeclaration -> VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)


state 169

    (25) interfaceContent -> interfaceContent COMA ID . DOSPTS expression

    DOSPTS          shift and go to state 172


state 170

    (23) arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA .

    CONSOLE         reduce using rule 23 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    IF              reduce using rule 23 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    WHILE           reduce using rule 23 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    VAR             reduce using rule 23 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    ID              reduce using rule 23 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    BREAK           reduce using rule 23 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    CONTINUE        reduce using rule 23 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    FUNC            reduce using rule 23 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    RETURN          reduce using rule 23 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    INTERFACE       reduce using rule 23 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    $end            reduce using rule 23 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    LLAVEDER        reduce using rule 23 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)


state 171

    (18) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block . LLAVEDER
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . assignment
    (10) instruccion -> . breakstmt
    (11) instruccion -> . continuestmt
    (12) instruccion -> . functionstmt
    (13) instruccion -> . call
    (14) instruccion -> . returnstmt
    (15) instruccion -> . interfacecreation
    (16) instruccion -> . interdeclaration
    (17) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (18) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (19) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (21) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (22) declaration -> . VAR ID DOSPTS type IGUAL expression PUNTOCOMA
    (23) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (27) assignment -> . ID IGUAL expression PUNTOCOMA
    (42) breakstmt -> . BREAK PUNTOCOMA
    (43) continuestmt -> . CONTINUE PUNTOCOMA
    (32) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (30) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (31) call -> . ID PARIZQ PARDER PUNTOCOMA
    (28) returnstmt -> . RETURN expression PUNTOCOMA
    (29) returnstmt -> . RETURN PUNTOCOMA
    (35) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (24) interdeclaration -> . VAR ID DOSPTS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    LLAVEDER        shift and go to state 173
    CONSOLE         shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    VAR             shift and go to state 20
    ID              shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    FUNC            shift and go to state 24
    RETURN          shift and go to state 25
    INTERFACE       shift and go to state 26

    instruccion                    shift and go to state 27
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    assignment                     shift and go to state 9
    breakstmt                      shift and go to state 10
    continuestmt                   shift and go to state 11
    functionstmt                   shift and go to state 12
    call                           shift and go to state 13
    returnstmt                     shift and go to state 14
    interfacecreation              shift and go to state 15
    interdeclaration               shift and go to state 16

state 172

    (25) interfaceContent -> interfaceContent COMA ID DOSPTS . expression
    (50) expression -> . expression MAS expression
    (51) expression -> . expression MENOS expression
    (52) expression -> . expression POR expression
    (53) expression -> . expression DIVIDIDO expression
    (54) expression -> . expression MAYOR expression
    (55) expression -> . expression MENOR expression
    (56) expression -> . expression MAYORIG expression
    (57) expression -> . expression MENORIG expression
    (58) expression -> . expression IGUALDAD expression
    (59) expression -> . expression DIF expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . PARIZQ expression PARDER
    (64) expression -> . expression TERN expression DOSPTS expression
    (65) expression -> . ENTERO
    (66) expression -> . CADENA
    (67) expression -> . listArray
    (68) expression -> . CORIZQ expressionList CORDER
    (69) expression -> . ID PARIZQ expressionList PARDER
    (70) expression -> . ID PARIZQ PARDER
    (71) listArray -> . ID CORIZQ expression CORDER
    (72) listArray -> . ID

    NOT             shift and go to state 39
    PARIZQ          shift and go to state 40
    ENTERO          shift and go to state 41
    CADENA          shift and go to state 42
    CORIZQ          shift and go to state 44
    ID              shift and go to state 45

    expression                     shift and go to state 174
    listArray                      shift and go to state 43

state 173

    (18) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .

    CONSOLE         reduce using rule 18 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 18 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 18 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 18 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 18 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 18 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 18 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 18 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 18 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    INTERFACE       reduce using rule 18 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 18 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 18 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)


state 174

    (25) interfaceContent -> interfaceContent COMA ID DOSPTS expression .
    (50) expression -> expression . MAS expression
    (51) expression -> expression . MENOS expression
    (52) expression -> expression . POR expression
    (53) expression -> expression . DIVIDIDO expression
    (54) expression -> expression . MAYOR expression
    (55) expression -> expression . MENOR expression
    (56) expression -> expression . MAYORIG expression
    (57) expression -> expression . MENORIG expression
    (58) expression -> expression . IGUALDAD expression
    (59) expression -> expression . DIF expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (64) expression -> expression . TERN expression DOSPTS expression

    LLAVEDER        reduce using rule 25 (interfaceContent -> interfaceContent COMA ID DOSPTS expression .)
    COMA            reduce using rule 25 (interfaceContent -> interfaceContent COMA ID DOSPTS expression .)
    MAS             shift and go to state 58
    MENOS           shift and go to state 59
    POR             shift and go to state 60
    DIVIDIDO        shift and go to state 61
    MAYOR           shift and go to state 62
    MENOR           shift and go to state 63
    MAYORIG         shift and go to state 64
    MENORIG         shift and go to state 65
    IGUALDAD        shift and go to state 66
    DIF             shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    TERN            shift and go to state 70

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 71 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 71 resolved as shift
WARNING: shift/reduce conflict for POR in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 71 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 71 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 71 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 71 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 71 resolved as shift
WARNING: shift/reduce conflict for IGUALDAD in state 71 resolved as shift
WARNING: shift/reduce conflict for DIF in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for OR in state 71 resolved as shift
WARNING: shift/reduce conflict for TERN in state 71 resolved as shift
WARNING: shift/reduce conflict for MAS in state 103 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 103 resolved as shift
WARNING: shift/reduce conflict for POR in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 103 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 103 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 103 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 103 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 103 resolved as shift
WARNING: shift/reduce conflict for IGUALDAD in state 103 resolved as shift
WARNING: shift/reduce conflict for DIF in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for TERN in state 103 resolved as shift
WARNING: shift/reduce conflict for MAS in state 104 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 104 resolved as shift
WARNING: shift/reduce conflict for POR in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 104 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 104 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 104 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 104 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 104 resolved as shift
WARNING: shift/reduce conflict for IGUALDAD in state 104 resolved as shift
WARNING: shift/reduce conflict for DIF in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
WARNING: shift/reduce conflict for TERN in state 104 resolved as shift
WARNING: shift/reduce conflict for MAS in state 143 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 143 resolved as shift
WARNING: shift/reduce conflict for POR in state 143 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 143 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 143 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 143 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 143 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 143 resolved as shift
WARNING: shift/reduce conflict for IGUALDAD in state 143 resolved as shift
WARNING: shift/reduce conflict for DIF in state 143 resolved as shift
WARNING: shift/reduce conflict for AND in state 143 resolved as shift
WARNING: shift/reduce conflict for OR in state 143 resolved as shift
WARNING: shift/reduce conflict for TERN in state 143 resolved as shift
