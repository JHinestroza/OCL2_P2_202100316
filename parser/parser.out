Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    INDEXOF
    JOIN
    LCASE
    LENGHT
    POP
    PUSH
    UPCASE
    false
    true

Grammar

Rule 0     S' -> s
Rule 1     s -> block
Rule 2     block -> block instruccion
Rule 3     block -> instruccion
Rule 4     instruccion -> print
Rule 5     instruccion -> ifinstruction
Rule 6     instruccion -> whileinstruction
Rule 7     instruccion -> declaration
Rule 8     instruccion -> arraydeclaration
Rule 9     instruccion -> forinstruction
Rule 10    instruccion -> assignment
Rule 11    instruccion -> breakstmt
Rule 12    instruccion -> continuestmt
Rule 13    instruccion -> functionstmt
Rule 14    instruccion -> call
Rule 15    instruccion -> returnstmt
Rule 16    instruccion -> interfacecreation
Rule 17    instruccion -> switch_statement
Rule 18    instruccion -> interdeclaration
Rule 19    print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
Rule 20    ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
Rule 21    ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
Rule 22    ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
Rule 23    switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
Rule 24    switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
Rule 25    cases_statement -> cases_statement case_statement
Rule 26    cases_statement -> case_statement
Rule 27    case_statement -> CASE expression DOSPUNTOS block
Rule 28    default_case -> DEFAULT DOSPUNTOS block
Rule 29    whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
Rule 30    operadores -> ID MAS MAS
Rule 31    forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
Rule 32    declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
Rule 33    declaration -> VAR ID IGUAL expression PUNTOCOMA
Rule 34    declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
Rule 35    arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
Rule 36    interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA
Rule 37    interfaceContent -> interfaceContent COMA ID DOSPUNTOS expression
Rule 38    interfaceContent -> ID DOSPUNTOS expression
Rule 39    assignment -> ID IGUAL expression PUNTOCOMA
Rule 40    returnstmt -> RETURN expression PUNTOCOMA
Rule 41    returnstmt -> RETURN PUNTOCOMA
Rule 42    call -> ID PARIZQ expressionList PARDER PUNTOCOMA
Rule 43    call -> ID PARIZQ PARDER PUNTOCOMA
Rule 44    functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
Rule 45    funcparams -> PARIZQ paramsList PARDER
Rule 46    funcparams -> PARIZQ PARDER
Rule 47    interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
Rule 48    attributeList -> attributeList ID DOSPUNTOS type PUNTOCOMA
Rule 49    attributeList -> ID DOSPUNTOS type PUNTOCOMA
Rule 50    paramsList -> paramsList COMA ID DOSPUNTOS type
Rule 51    paramsList -> ID DOSPUNTOS type
Rule 52    functype -> DOSPUNTOS type
Rule 53    functype -> <empty>
Rule 54    breakstmt -> BREAK PUNTOCOMA
Rule 55    continuestmt -> CONTINUE PUNTOCOMA
Rule 56    type -> NUMBER
Rule 57    type -> FLOAT
Rule 58    type -> STRING
Rule 59    type -> BOOL
Rule 60    expressionList -> expressionList COMA expression
Rule 61    expressionList -> expression
Rule 62    expression -> expression MAS expression
Rule 63    expression -> expression MENOS expression
Rule 64    expression -> expression POR expression
Rule 65    expression -> expression DIVIDIDO expression
Rule 66    expression -> expression MOD expression
Rule 67    expression -> MENOS expression
Rule 68    expression -> expression MENOR expression
Rule 69    expression -> expression MAYOR expression
Rule 70    expression -> expression MENORIG expression
Rule 71    expression -> expression MAYORIG expression
Rule 72    expression -> expression IGUALDAD expression
Rule 73    expression -> expression DIF expression
Rule 74    expression -> expression AND expression
Rule 75    expression -> expression OR expression
Rule 76    expression -> NOT expression
Rule 77    expression -> PARIZQ expression PARDER
Rule 78    expression -> PARSEINT PARIZQ expression PARDER
Rule 79    expression -> PARSEFLOAT PARIZQ expression PARDER
Rule 80    expression -> expression PUNTO TOSTRING PARIZQ PARDER
Rule 81    expression -> ID PUNTO TOSTRING PARIZQ PARDER
Rule 82    expression -> TYPEOF expression
Rule 83    expression -> expression TERN expression DOSPUNTOS expression
Rule 84    expression -> ENTERO
Rule 85    expression -> CADENA
Rule 86    expression -> DECIMAL
Rule 87    expression -> BOOLEANO
Rule 88    expression -> listArray
Rule 89    expression -> CORIZQ expressionList CORDER
Rule 90    expression -> ID PARIZQ expressionList PARDER
Rule 91    expression -> ID PARIZQ PARDER
Rule 92    listArray -> ID CORIZQ expression CORDER
Rule 93    listArray -> ID

Terminals, with rules where they appear

AND                  : 74
BOOL                 : 59
BOOLEANO             : 87
BREAK                : 54
CADENA               : 85
CASE                 : 27
COMA                 : 37 50 60
CONSOLE              : 19
CONST                : 34
CONTINUE             : 55
CORDER               : 35 89 92
CORIZQ               : 35 89 92
DECIMAL              : 86
DEFAULT              : 28
DIF                  : 73
DIVIDIDO             : 65
DOSPUNTOS            : 27 28 32 34 35 36 37 38 48 49 50 51 52 83
ELSE                 : 20 21
ENTERO               : 84
FLOAT                : 57
FOR                  : 31
FUNC                 : 44
ID                   : 30 32 33 34 35 36 36 37 38 39 42 43 44 47 48 49 50 51 81 90 91 92 93
IF                   : 20 21 22
IGUAL                : 32 33 34 35 36 39
IGUALDAD             : 72
INDEXOF              : 
INTERFACE            : 47
JOIN                 : 
LCASE                : 
LENGHT               : 
LLAVEDER             : 20 20 21 22 23 24 29 31 36 44 47
LLAVEIZQ             : 20 20 21 22 23 24 29 31 36 44 47
LOG                  : 19
MAS                  : 30 30 62
MAYOR                : 69
MAYORIG              : 71
MENOR                : 68
MENORIG              : 70
MENOS                : 63 67
MOD                  : 66
NOT                  : 76
NUMBER               : 56
OR                   : 75
PARDER               : 19 20 21 22 23 24 29 31 42 43 45 46 77 78 79 80 81 90 91
PARIZQ               : 19 20 21 22 23 24 29 31 42 43 45 46 77 78 79 80 81 90 91
PARSEFLOAT           : 79
PARSEINT             : 78
POP                  : 
POR                  : 64
PUNTO                : 19 80 81
PUNTOCOMA            : 19 31 32 33 34 35 36 39 40 41 42 43 47 48 49 54 55
PUSH                 : 
RETURN               : 40 41
STRING               : 58
SWITCH               : 23 24
TERN                 : 83
TOSTRING             : 80 81
TYPEOF               : 82
UPCASE               : 
VAR                  : 32 33 35 36
WHILE                : 29
error                : 
false                : 
true                 : 

Nonterminals, with rules where they appear

arraydeclaration     : 8
assignment           : 10
attributeList        : 47 48
block                : 1 2 20 20 21 22 27 28 29 31 44
breakstmt            : 11
call                 : 14
case_statement       : 25 26
cases_statement      : 23 24 25
continuestmt         : 12
declaration          : 7 31
default_case         : 23
expression           : 20 21 22 23 24 27 29 31 32 33 34 35 37 38 39 40 60 61 62 62 63 63 64 64 65 65 66 66 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 77 78 79 80 82 83 83 83 92
expressionList       : 19 42 60 89 90
forinstruction       : 9
funcparams           : 44
functionstmt         : 13
functype             : 44
ifinstruction        : 5 21
instruccion          : 2 3
interdeclaration     : 18
interfaceContent     : 36 37
interfacecreation    : 16
listArray            : 88
operadores           : 31
paramsList           : 45 50
print                : 4
returnstmt           : 15
s                    : 0
switch_statement     : 17
type                 : 32 34 35 48 49 50 51 52
whileinstruction     : 6

Parsing method: LALR

state 0

    (0) S' -> . s
    (1) s -> . block
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    s                              shift and go to state 1
    block                          shift and go to state 2
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 1

    (0) S' -> s .



state 2

    (1) s -> block .
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    $end            reduce using rule 1 (s -> block .)
    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    instruccion                    shift and go to state 32
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 3

    (3) block -> instruccion .

    CONSOLE         reduce using rule 3 (block -> instruccion .)
    IF              reduce using rule 3 (block -> instruccion .)
    WHILE           reduce using rule 3 (block -> instruccion .)
    VAR             reduce using rule 3 (block -> instruccion .)
    CONST           reduce using rule 3 (block -> instruccion .)
    FOR             reduce using rule 3 (block -> instruccion .)
    ID              reduce using rule 3 (block -> instruccion .)
    BREAK           reduce using rule 3 (block -> instruccion .)
    CONTINUE        reduce using rule 3 (block -> instruccion .)
    FUNC            reduce using rule 3 (block -> instruccion .)
    RETURN          reduce using rule 3 (block -> instruccion .)
    INTERFACE       reduce using rule 3 (block -> instruccion .)
    SWITCH          reduce using rule 3 (block -> instruccion .)
    $end            reduce using rule 3 (block -> instruccion .)
    LLAVEDER        reduce using rule 3 (block -> instruccion .)
    DEFAULT         reduce using rule 3 (block -> instruccion .)
    CASE            reduce using rule 3 (block -> instruccion .)


state 4

    (4) instruccion -> print .

    CONSOLE         reduce using rule 4 (instruccion -> print .)
    IF              reduce using rule 4 (instruccion -> print .)
    WHILE           reduce using rule 4 (instruccion -> print .)
    VAR             reduce using rule 4 (instruccion -> print .)
    CONST           reduce using rule 4 (instruccion -> print .)
    FOR             reduce using rule 4 (instruccion -> print .)
    ID              reduce using rule 4 (instruccion -> print .)
    BREAK           reduce using rule 4 (instruccion -> print .)
    CONTINUE        reduce using rule 4 (instruccion -> print .)
    FUNC            reduce using rule 4 (instruccion -> print .)
    RETURN          reduce using rule 4 (instruccion -> print .)
    INTERFACE       reduce using rule 4 (instruccion -> print .)
    SWITCH          reduce using rule 4 (instruccion -> print .)
    $end            reduce using rule 4 (instruccion -> print .)
    LLAVEDER        reduce using rule 4 (instruccion -> print .)
    DEFAULT         reduce using rule 4 (instruccion -> print .)
    CASE            reduce using rule 4 (instruccion -> print .)


state 5

    (5) instruccion -> ifinstruction .

    CONSOLE         reduce using rule 5 (instruccion -> ifinstruction .)
    IF              reduce using rule 5 (instruccion -> ifinstruction .)
    WHILE           reduce using rule 5 (instruccion -> ifinstruction .)
    VAR             reduce using rule 5 (instruccion -> ifinstruction .)
    CONST           reduce using rule 5 (instruccion -> ifinstruction .)
    FOR             reduce using rule 5 (instruccion -> ifinstruction .)
    ID              reduce using rule 5 (instruccion -> ifinstruction .)
    BREAK           reduce using rule 5 (instruccion -> ifinstruction .)
    CONTINUE        reduce using rule 5 (instruccion -> ifinstruction .)
    FUNC            reduce using rule 5 (instruccion -> ifinstruction .)
    RETURN          reduce using rule 5 (instruccion -> ifinstruction .)
    INTERFACE       reduce using rule 5 (instruccion -> ifinstruction .)
    SWITCH          reduce using rule 5 (instruccion -> ifinstruction .)
    $end            reduce using rule 5 (instruccion -> ifinstruction .)
    LLAVEDER        reduce using rule 5 (instruccion -> ifinstruction .)
    DEFAULT         reduce using rule 5 (instruccion -> ifinstruction .)
    CASE            reduce using rule 5 (instruccion -> ifinstruction .)


state 6

    (6) instruccion -> whileinstruction .

    CONSOLE         reduce using rule 6 (instruccion -> whileinstruction .)
    IF              reduce using rule 6 (instruccion -> whileinstruction .)
    WHILE           reduce using rule 6 (instruccion -> whileinstruction .)
    VAR             reduce using rule 6 (instruccion -> whileinstruction .)
    CONST           reduce using rule 6 (instruccion -> whileinstruction .)
    FOR             reduce using rule 6 (instruccion -> whileinstruction .)
    ID              reduce using rule 6 (instruccion -> whileinstruction .)
    BREAK           reduce using rule 6 (instruccion -> whileinstruction .)
    CONTINUE        reduce using rule 6 (instruccion -> whileinstruction .)
    FUNC            reduce using rule 6 (instruccion -> whileinstruction .)
    RETURN          reduce using rule 6 (instruccion -> whileinstruction .)
    INTERFACE       reduce using rule 6 (instruccion -> whileinstruction .)
    SWITCH          reduce using rule 6 (instruccion -> whileinstruction .)
    $end            reduce using rule 6 (instruccion -> whileinstruction .)
    LLAVEDER        reduce using rule 6 (instruccion -> whileinstruction .)
    DEFAULT         reduce using rule 6 (instruccion -> whileinstruction .)
    CASE            reduce using rule 6 (instruccion -> whileinstruction .)


state 7

    (7) instruccion -> declaration .

    CONSOLE         reduce using rule 7 (instruccion -> declaration .)
    IF              reduce using rule 7 (instruccion -> declaration .)
    WHILE           reduce using rule 7 (instruccion -> declaration .)
    VAR             reduce using rule 7 (instruccion -> declaration .)
    CONST           reduce using rule 7 (instruccion -> declaration .)
    FOR             reduce using rule 7 (instruccion -> declaration .)
    ID              reduce using rule 7 (instruccion -> declaration .)
    BREAK           reduce using rule 7 (instruccion -> declaration .)
    CONTINUE        reduce using rule 7 (instruccion -> declaration .)
    FUNC            reduce using rule 7 (instruccion -> declaration .)
    RETURN          reduce using rule 7 (instruccion -> declaration .)
    INTERFACE       reduce using rule 7 (instruccion -> declaration .)
    SWITCH          reduce using rule 7 (instruccion -> declaration .)
    $end            reduce using rule 7 (instruccion -> declaration .)
    LLAVEDER        reduce using rule 7 (instruccion -> declaration .)
    DEFAULT         reduce using rule 7 (instruccion -> declaration .)
    CASE            reduce using rule 7 (instruccion -> declaration .)


state 8

    (8) instruccion -> arraydeclaration .

    CONSOLE         reduce using rule 8 (instruccion -> arraydeclaration .)
    IF              reduce using rule 8 (instruccion -> arraydeclaration .)
    WHILE           reduce using rule 8 (instruccion -> arraydeclaration .)
    VAR             reduce using rule 8 (instruccion -> arraydeclaration .)
    CONST           reduce using rule 8 (instruccion -> arraydeclaration .)
    FOR             reduce using rule 8 (instruccion -> arraydeclaration .)
    ID              reduce using rule 8 (instruccion -> arraydeclaration .)
    BREAK           reduce using rule 8 (instruccion -> arraydeclaration .)
    CONTINUE        reduce using rule 8 (instruccion -> arraydeclaration .)
    FUNC            reduce using rule 8 (instruccion -> arraydeclaration .)
    RETURN          reduce using rule 8 (instruccion -> arraydeclaration .)
    INTERFACE       reduce using rule 8 (instruccion -> arraydeclaration .)
    SWITCH          reduce using rule 8 (instruccion -> arraydeclaration .)
    $end            reduce using rule 8 (instruccion -> arraydeclaration .)
    LLAVEDER        reduce using rule 8 (instruccion -> arraydeclaration .)
    DEFAULT         reduce using rule 8 (instruccion -> arraydeclaration .)
    CASE            reduce using rule 8 (instruccion -> arraydeclaration .)


state 9

    (9) instruccion -> forinstruction .

    CONSOLE         reduce using rule 9 (instruccion -> forinstruction .)
    IF              reduce using rule 9 (instruccion -> forinstruction .)
    WHILE           reduce using rule 9 (instruccion -> forinstruction .)
    VAR             reduce using rule 9 (instruccion -> forinstruction .)
    CONST           reduce using rule 9 (instruccion -> forinstruction .)
    FOR             reduce using rule 9 (instruccion -> forinstruction .)
    ID              reduce using rule 9 (instruccion -> forinstruction .)
    BREAK           reduce using rule 9 (instruccion -> forinstruction .)
    CONTINUE        reduce using rule 9 (instruccion -> forinstruction .)
    FUNC            reduce using rule 9 (instruccion -> forinstruction .)
    RETURN          reduce using rule 9 (instruccion -> forinstruction .)
    INTERFACE       reduce using rule 9 (instruccion -> forinstruction .)
    SWITCH          reduce using rule 9 (instruccion -> forinstruction .)
    $end            reduce using rule 9 (instruccion -> forinstruction .)
    LLAVEDER        reduce using rule 9 (instruccion -> forinstruction .)
    DEFAULT         reduce using rule 9 (instruccion -> forinstruction .)
    CASE            reduce using rule 9 (instruccion -> forinstruction .)


state 10

    (10) instruccion -> assignment .

    CONSOLE         reduce using rule 10 (instruccion -> assignment .)
    IF              reduce using rule 10 (instruccion -> assignment .)
    WHILE           reduce using rule 10 (instruccion -> assignment .)
    VAR             reduce using rule 10 (instruccion -> assignment .)
    CONST           reduce using rule 10 (instruccion -> assignment .)
    FOR             reduce using rule 10 (instruccion -> assignment .)
    ID              reduce using rule 10 (instruccion -> assignment .)
    BREAK           reduce using rule 10 (instruccion -> assignment .)
    CONTINUE        reduce using rule 10 (instruccion -> assignment .)
    FUNC            reduce using rule 10 (instruccion -> assignment .)
    RETURN          reduce using rule 10 (instruccion -> assignment .)
    INTERFACE       reduce using rule 10 (instruccion -> assignment .)
    SWITCH          reduce using rule 10 (instruccion -> assignment .)
    $end            reduce using rule 10 (instruccion -> assignment .)
    LLAVEDER        reduce using rule 10 (instruccion -> assignment .)
    DEFAULT         reduce using rule 10 (instruccion -> assignment .)
    CASE            reduce using rule 10 (instruccion -> assignment .)


state 11

    (11) instruccion -> breakstmt .

    CONSOLE         reduce using rule 11 (instruccion -> breakstmt .)
    IF              reduce using rule 11 (instruccion -> breakstmt .)
    WHILE           reduce using rule 11 (instruccion -> breakstmt .)
    VAR             reduce using rule 11 (instruccion -> breakstmt .)
    CONST           reduce using rule 11 (instruccion -> breakstmt .)
    FOR             reduce using rule 11 (instruccion -> breakstmt .)
    ID              reduce using rule 11 (instruccion -> breakstmt .)
    BREAK           reduce using rule 11 (instruccion -> breakstmt .)
    CONTINUE        reduce using rule 11 (instruccion -> breakstmt .)
    FUNC            reduce using rule 11 (instruccion -> breakstmt .)
    RETURN          reduce using rule 11 (instruccion -> breakstmt .)
    INTERFACE       reduce using rule 11 (instruccion -> breakstmt .)
    SWITCH          reduce using rule 11 (instruccion -> breakstmt .)
    $end            reduce using rule 11 (instruccion -> breakstmt .)
    LLAVEDER        reduce using rule 11 (instruccion -> breakstmt .)
    DEFAULT         reduce using rule 11 (instruccion -> breakstmt .)
    CASE            reduce using rule 11 (instruccion -> breakstmt .)


state 12

    (12) instruccion -> continuestmt .

    CONSOLE         reduce using rule 12 (instruccion -> continuestmt .)
    IF              reduce using rule 12 (instruccion -> continuestmt .)
    WHILE           reduce using rule 12 (instruccion -> continuestmt .)
    VAR             reduce using rule 12 (instruccion -> continuestmt .)
    CONST           reduce using rule 12 (instruccion -> continuestmt .)
    FOR             reduce using rule 12 (instruccion -> continuestmt .)
    ID              reduce using rule 12 (instruccion -> continuestmt .)
    BREAK           reduce using rule 12 (instruccion -> continuestmt .)
    CONTINUE        reduce using rule 12 (instruccion -> continuestmt .)
    FUNC            reduce using rule 12 (instruccion -> continuestmt .)
    RETURN          reduce using rule 12 (instruccion -> continuestmt .)
    INTERFACE       reduce using rule 12 (instruccion -> continuestmt .)
    SWITCH          reduce using rule 12 (instruccion -> continuestmt .)
    $end            reduce using rule 12 (instruccion -> continuestmt .)
    LLAVEDER        reduce using rule 12 (instruccion -> continuestmt .)
    DEFAULT         reduce using rule 12 (instruccion -> continuestmt .)
    CASE            reduce using rule 12 (instruccion -> continuestmt .)


state 13

    (13) instruccion -> functionstmt .

    CONSOLE         reduce using rule 13 (instruccion -> functionstmt .)
    IF              reduce using rule 13 (instruccion -> functionstmt .)
    WHILE           reduce using rule 13 (instruccion -> functionstmt .)
    VAR             reduce using rule 13 (instruccion -> functionstmt .)
    CONST           reduce using rule 13 (instruccion -> functionstmt .)
    FOR             reduce using rule 13 (instruccion -> functionstmt .)
    ID              reduce using rule 13 (instruccion -> functionstmt .)
    BREAK           reduce using rule 13 (instruccion -> functionstmt .)
    CONTINUE        reduce using rule 13 (instruccion -> functionstmt .)
    FUNC            reduce using rule 13 (instruccion -> functionstmt .)
    RETURN          reduce using rule 13 (instruccion -> functionstmt .)
    INTERFACE       reduce using rule 13 (instruccion -> functionstmt .)
    SWITCH          reduce using rule 13 (instruccion -> functionstmt .)
    $end            reduce using rule 13 (instruccion -> functionstmt .)
    LLAVEDER        reduce using rule 13 (instruccion -> functionstmt .)
    DEFAULT         reduce using rule 13 (instruccion -> functionstmt .)
    CASE            reduce using rule 13 (instruccion -> functionstmt .)


state 14

    (14) instruccion -> call .

    CONSOLE         reduce using rule 14 (instruccion -> call .)
    IF              reduce using rule 14 (instruccion -> call .)
    WHILE           reduce using rule 14 (instruccion -> call .)
    VAR             reduce using rule 14 (instruccion -> call .)
    CONST           reduce using rule 14 (instruccion -> call .)
    FOR             reduce using rule 14 (instruccion -> call .)
    ID              reduce using rule 14 (instruccion -> call .)
    BREAK           reduce using rule 14 (instruccion -> call .)
    CONTINUE        reduce using rule 14 (instruccion -> call .)
    FUNC            reduce using rule 14 (instruccion -> call .)
    RETURN          reduce using rule 14 (instruccion -> call .)
    INTERFACE       reduce using rule 14 (instruccion -> call .)
    SWITCH          reduce using rule 14 (instruccion -> call .)
    $end            reduce using rule 14 (instruccion -> call .)
    LLAVEDER        reduce using rule 14 (instruccion -> call .)
    DEFAULT         reduce using rule 14 (instruccion -> call .)
    CASE            reduce using rule 14 (instruccion -> call .)


state 15

    (15) instruccion -> returnstmt .

    CONSOLE         reduce using rule 15 (instruccion -> returnstmt .)
    IF              reduce using rule 15 (instruccion -> returnstmt .)
    WHILE           reduce using rule 15 (instruccion -> returnstmt .)
    VAR             reduce using rule 15 (instruccion -> returnstmt .)
    CONST           reduce using rule 15 (instruccion -> returnstmt .)
    FOR             reduce using rule 15 (instruccion -> returnstmt .)
    ID              reduce using rule 15 (instruccion -> returnstmt .)
    BREAK           reduce using rule 15 (instruccion -> returnstmt .)
    CONTINUE        reduce using rule 15 (instruccion -> returnstmt .)
    FUNC            reduce using rule 15 (instruccion -> returnstmt .)
    RETURN          reduce using rule 15 (instruccion -> returnstmt .)
    INTERFACE       reduce using rule 15 (instruccion -> returnstmt .)
    SWITCH          reduce using rule 15 (instruccion -> returnstmt .)
    $end            reduce using rule 15 (instruccion -> returnstmt .)
    LLAVEDER        reduce using rule 15 (instruccion -> returnstmt .)
    DEFAULT         reduce using rule 15 (instruccion -> returnstmt .)
    CASE            reduce using rule 15 (instruccion -> returnstmt .)


state 16

    (16) instruccion -> interfacecreation .

    CONSOLE         reduce using rule 16 (instruccion -> interfacecreation .)
    IF              reduce using rule 16 (instruccion -> interfacecreation .)
    WHILE           reduce using rule 16 (instruccion -> interfacecreation .)
    VAR             reduce using rule 16 (instruccion -> interfacecreation .)
    CONST           reduce using rule 16 (instruccion -> interfacecreation .)
    FOR             reduce using rule 16 (instruccion -> interfacecreation .)
    ID              reduce using rule 16 (instruccion -> interfacecreation .)
    BREAK           reduce using rule 16 (instruccion -> interfacecreation .)
    CONTINUE        reduce using rule 16 (instruccion -> interfacecreation .)
    FUNC            reduce using rule 16 (instruccion -> interfacecreation .)
    RETURN          reduce using rule 16 (instruccion -> interfacecreation .)
    INTERFACE       reduce using rule 16 (instruccion -> interfacecreation .)
    SWITCH          reduce using rule 16 (instruccion -> interfacecreation .)
    $end            reduce using rule 16 (instruccion -> interfacecreation .)
    LLAVEDER        reduce using rule 16 (instruccion -> interfacecreation .)
    DEFAULT         reduce using rule 16 (instruccion -> interfacecreation .)
    CASE            reduce using rule 16 (instruccion -> interfacecreation .)


state 17

    (17) instruccion -> switch_statement .

    CONSOLE         reduce using rule 17 (instruccion -> switch_statement .)
    IF              reduce using rule 17 (instruccion -> switch_statement .)
    WHILE           reduce using rule 17 (instruccion -> switch_statement .)
    VAR             reduce using rule 17 (instruccion -> switch_statement .)
    CONST           reduce using rule 17 (instruccion -> switch_statement .)
    FOR             reduce using rule 17 (instruccion -> switch_statement .)
    ID              reduce using rule 17 (instruccion -> switch_statement .)
    BREAK           reduce using rule 17 (instruccion -> switch_statement .)
    CONTINUE        reduce using rule 17 (instruccion -> switch_statement .)
    FUNC            reduce using rule 17 (instruccion -> switch_statement .)
    RETURN          reduce using rule 17 (instruccion -> switch_statement .)
    INTERFACE       reduce using rule 17 (instruccion -> switch_statement .)
    SWITCH          reduce using rule 17 (instruccion -> switch_statement .)
    $end            reduce using rule 17 (instruccion -> switch_statement .)
    LLAVEDER        reduce using rule 17 (instruccion -> switch_statement .)
    DEFAULT         reduce using rule 17 (instruccion -> switch_statement .)
    CASE            reduce using rule 17 (instruccion -> switch_statement .)


state 18

    (18) instruccion -> interdeclaration .

    CONSOLE         reduce using rule 18 (instruccion -> interdeclaration .)
    IF              reduce using rule 18 (instruccion -> interdeclaration .)
    WHILE           reduce using rule 18 (instruccion -> interdeclaration .)
    VAR             reduce using rule 18 (instruccion -> interdeclaration .)
    CONST           reduce using rule 18 (instruccion -> interdeclaration .)
    FOR             reduce using rule 18 (instruccion -> interdeclaration .)
    ID              reduce using rule 18 (instruccion -> interdeclaration .)
    BREAK           reduce using rule 18 (instruccion -> interdeclaration .)
    CONTINUE        reduce using rule 18 (instruccion -> interdeclaration .)
    FUNC            reduce using rule 18 (instruccion -> interdeclaration .)
    RETURN          reduce using rule 18 (instruccion -> interdeclaration .)
    INTERFACE       reduce using rule 18 (instruccion -> interdeclaration .)
    SWITCH          reduce using rule 18 (instruccion -> interdeclaration .)
    $end            reduce using rule 18 (instruccion -> interdeclaration .)
    LLAVEDER        reduce using rule 18 (instruccion -> interdeclaration .)
    DEFAULT         reduce using rule 18 (instruccion -> interdeclaration .)
    CASE            reduce using rule 18 (instruccion -> interdeclaration .)


state 19

    (19) print -> CONSOLE . PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA

    PUNTO           shift and go to state 33


state 20

    (20) ifinstruction -> IF . PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> IF . PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> IF . PARIZQ expression PARDER LLAVEIZQ block LLAVEDER

    PARIZQ          shift and go to state 34


state 21

    (29) whileinstruction -> WHILE . PARIZQ expression PARDER LLAVEIZQ block LLAVEDER

    PARIZQ          shift and go to state 35


state 22

    (32) declaration -> VAR . ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> VAR . ID IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> VAR . ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (36) interdeclaration -> VAR . ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    ID              shift and go to state 36


state 23

    (39) assignment -> ID . IGUAL expression PUNTOCOMA
    (42) call -> ID . PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> ID . PARIZQ PARDER PUNTOCOMA

    IGUAL           shift and go to state 37
    PARIZQ          shift and go to state 38


state 24

    (34) declaration -> CONST . ID DOSPUNTOS type IGUAL expression PUNTOCOMA

    ID              shift and go to state 39


state 25

    (31) forinstruction -> FOR . PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER

    PARIZQ          shift and go to state 40


state 26

    (54) breakstmt -> BREAK . PUNTOCOMA

    PUNTOCOMA       shift and go to state 41


state 27

    (55) continuestmt -> CONTINUE . PUNTOCOMA

    PUNTOCOMA       shift and go to state 42


state 28

    (44) functionstmt -> FUNC . ID funcparams functype LLAVEIZQ block LLAVEDER

    ID              shift and go to state 43


state 29

    (40) returnstmt -> RETURN . expression PUNTOCOMA
    (41) returnstmt -> RETURN . PUNTOCOMA
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    PUNTOCOMA       shift and go to state 45
    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 44
    listArray                      shift and go to state 57

state 30

    (47) interfacecreation -> INTERFACE . ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA

    ID              shift and go to state 59


state 31

    (23) switch_statement -> SWITCH . PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> SWITCH . PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER

    PARIZQ          shift and go to state 60


state 32

    (2) block -> block instruccion .

    CONSOLE         reduce using rule 2 (block -> block instruccion .)
    IF              reduce using rule 2 (block -> block instruccion .)
    WHILE           reduce using rule 2 (block -> block instruccion .)
    VAR             reduce using rule 2 (block -> block instruccion .)
    CONST           reduce using rule 2 (block -> block instruccion .)
    FOR             reduce using rule 2 (block -> block instruccion .)
    ID              reduce using rule 2 (block -> block instruccion .)
    BREAK           reduce using rule 2 (block -> block instruccion .)
    CONTINUE        reduce using rule 2 (block -> block instruccion .)
    FUNC            reduce using rule 2 (block -> block instruccion .)
    RETURN          reduce using rule 2 (block -> block instruccion .)
    INTERFACE       reduce using rule 2 (block -> block instruccion .)
    SWITCH          reduce using rule 2 (block -> block instruccion .)
    $end            reduce using rule 2 (block -> block instruccion .)
    LLAVEDER        reduce using rule 2 (block -> block instruccion .)
    DEFAULT         reduce using rule 2 (block -> block instruccion .)
    CASE            reduce using rule 2 (block -> block instruccion .)


state 33

    (19) print -> CONSOLE PUNTO . LOG PARIZQ expressionList PARDER PUNTOCOMA

    LOG             shift and go to state 61


state 34

    (20) ifinstruction -> IF PARIZQ . expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> IF PARIZQ . expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> IF PARIZQ . expression PARDER LLAVEIZQ block LLAVEDER
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 62
    listArray                      shift and go to state 57

state 35

    (29) whileinstruction -> WHILE PARIZQ . expression PARDER LLAVEIZQ block LLAVEDER
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 63
    listArray                      shift and go to state 57

state 36

    (32) declaration -> VAR ID . DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> VAR ID . IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> VAR ID . DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (36) interdeclaration -> VAR ID . DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    DOSPUNTOS       shift and go to state 64
    IGUAL           shift and go to state 65


state 37

    (39) assignment -> ID IGUAL . expression PUNTOCOMA
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 66
    listArray                      shift and go to state 57

state 38

    (42) call -> ID PARIZQ . expressionList PARDER PUNTOCOMA
    (43) call -> ID PARIZQ . PARDER PUNTOCOMA
    (60) expressionList -> . expressionList COMA expression
    (61) expressionList -> . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    PARDER          shift and go to state 68
    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expressionList                 shift and go to state 67
    expression                     shift and go to state 69
    listArray                      shift and go to state 57

state 39

    (34) declaration -> CONST ID . DOSPUNTOS type IGUAL expression PUNTOCOMA

    DOSPUNTOS       shift and go to state 70


state 40

    (31) forinstruction -> FOR PARIZQ . declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA

    VAR             shift and go to state 72
    CONST           shift and go to state 24

    declaration                    shift and go to state 71

state 41

    (54) breakstmt -> BREAK PUNTOCOMA .

    CONSOLE         reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    IF              reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    WHILE           reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    VAR             reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    CONST           reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    FOR             reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    ID              reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    BREAK           reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    CONTINUE        reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    FUNC            reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    RETURN          reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    INTERFACE       reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    SWITCH          reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    $end            reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    LLAVEDER        reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    DEFAULT         reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)
    CASE            reduce using rule 54 (breakstmt -> BREAK PUNTOCOMA .)


state 42

    (55) continuestmt -> CONTINUE PUNTOCOMA .

    CONSOLE         reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    IF              reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    WHILE           reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    VAR             reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    CONST           reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    FOR             reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    ID              reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    BREAK           reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    CONTINUE        reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    FUNC            reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    RETURN          reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    INTERFACE       reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    SWITCH          reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    $end            reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    LLAVEDER        reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    DEFAULT         reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)
    CASE            reduce using rule 55 (continuestmt -> CONTINUE PUNTOCOMA .)


state 43

    (44) functionstmt -> FUNC ID . funcparams functype LLAVEIZQ block LLAVEDER
    (45) funcparams -> . PARIZQ paramsList PARDER
    (46) funcparams -> . PARIZQ PARDER

    PARIZQ          shift and go to state 74

    funcparams                     shift and go to state 73

state 44

    (40) returnstmt -> RETURN expression . PUNTOCOMA
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       shift and go to state 75
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 45

    (41) returnstmt -> RETURN PUNTOCOMA .

    CONSOLE         reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    IF              reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    WHILE           reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    VAR             reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    CONST           reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    FOR             reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    ID              reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    BREAK           reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    CONTINUE        reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    FUNC            reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    RETURN          reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    INTERFACE       reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    SWITCH          reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    $end            reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    LLAVEDER        reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    DEFAULT         reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)
    CASE            reduce using rule 41 (returnstmt -> RETURN PUNTOCOMA .)


state 46

    (67) expression -> MENOS . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 91
    listArray                      shift and go to state 57

state 47

    (76) expression -> NOT . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 92
    listArray                      shift and go to state 57

state 48

    (77) expression -> PARIZQ . expression PARDER
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 93
    listArray                      shift and go to state 57

state 49

    (78) expression -> PARSEINT . PARIZQ expression PARDER

    PARIZQ          shift and go to state 94


state 50

    (79) expression -> PARSEFLOAT . PARIZQ expression PARDER

    PARIZQ          shift and go to state 95


state 51

    (81) expression -> ID . PUNTO TOSTRING PARIZQ PARDER
    (90) expression -> ID . PARIZQ expressionList PARDER
    (91) expression -> ID . PARIZQ PARDER
    (92) listArray -> ID . CORIZQ expression CORDER
    (93) listArray -> ID .

  ! shift/reduce conflict for PUNTO resolved as shift
    PUNTO           shift and go to state 96
    PARIZQ          shift and go to state 97
    CORIZQ          shift and go to state 98
    PUNTOCOMA       reduce using rule 93 (listArray -> ID .)
    MAS             reduce using rule 93 (listArray -> ID .)
    MENOS           reduce using rule 93 (listArray -> ID .)
    POR             reduce using rule 93 (listArray -> ID .)
    DIVIDIDO        reduce using rule 93 (listArray -> ID .)
    MOD             reduce using rule 93 (listArray -> ID .)
    MENOR           reduce using rule 93 (listArray -> ID .)
    MAYOR           reduce using rule 93 (listArray -> ID .)
    MENORIG         reduce using rule 93 (listArray -> ID .)
    MAYORIG         reduce using rule 93 (listArray -> ID .)
    IGUALDAD        reduce using rule 93 (listArray -> ID .)
    DIF             reduce using rule 93 (listArray -> ID .)
    AND             reduce using rule 93 (listArray -> ID .)
    OR              reduce using rule 93 (listArray -> ID .)
    TERN            reduce using rule 93 (listArray -> ID .)
    PARDER          reduce using rule 93 (listArray -> ID .)
    COMA            reduce using rule 93 (listArray -> ID .)
    CORDER          reduce using rule 93 (listArray -> ID .)
    DOSPUNTOS       reduce using rule 93 (listArray -> ID .)
    LLAVEDER        reduce using rule 93 (listArray -> ID .)

  ! PUNTO           [ reduce using rule 93 (listArray -> ID .) ]


state 52

    (82) expression -> TYPEOF . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 99
    listArray                      shift and go to state 57

state 53

    (84) expression -> ENTERO .

    PUNTOCOMA       reduce using rule 84 (expression -> ENTERO .)
    MAS             reduce using rule 84 (expression -> ENTERO .)
    MENOS           reduce using rule 84 (expression -> ENTERO .)
    POR             reduce using rule 84 (expression -> ENTERO .)
    DIVIDIDO        reduce using rule 84 (expression -> ENTERO .)
    MOD             reduce using rule 84 (expression -> ENTERO .)
    MENOR           reduce using rule 84 (expression -> ENTERO .)
    MAYOR           reduce using rule 84 (expression -> ENTERO .)
    MENORIG         reduce using rule 84 (expression -> ENTERO .)
    MAYORIG         reduce using rule 84 (expression -> ENTERO .)
    IGUALDAD        reduce using rule 84 (expression -> ENTERO .)
    DIF             reduce using rule 84 (expression -> ENTERO .)
    AND             reduce using rule 84 (expression -> ENTERO .)
    OR              reduce using rule 84 (expression -> ENTERO .)
    PUNTO           reduce using rule 84 (expression -> ENTERO .)
    TERN            reduce using rule 84 (expression -> ENTERO .)
    PARDER          reduce using rule 84 (expression -> ENTERO .)
    COMA            reduce using rule 84 (expression -> ENTERO .)
    CORDER          reduce using rule 84 (expression -> ENTERO .)
    DOSPUNTOS       reduce using rule 84 (expression -> ENTERO .)
    LLAVEDER        reduce using rule 84 (expression -> ENTERO .)


state 54

    (85) expression -> CADENA .

    PUNTOCOMA       reduce using rule 85 (expression -> CADENA .)
    MAS             reduce using rule 85 (expression -> CADENA .)
    MENOS           reduce using rule 85 (expression -> CADENA .)
    POR             reduce using rule 85 (expression -> CADENA .)
    DIVIDIDO        reduce using rule 85 (expression -> CADENA .)
    MOD             reduce using rule 85 (expression -> CADENA .)
    MENOR           reduce using rule 85 (expression -> CADENA .)
    MAYOR           reduce using rule 85 (expression -> CADENA .)
    MENORIG         reduce using rule 85 (expression -> CADENA .)
    MAYORIG         reduce using rule 85 (expression -> CADENA .)
    IGUALDAD        reduce using rule 85 (expression -> CADENA .)
    DIF             reduce using rule 85 (expression -> CADENA .)
    AND             reduce using rule 85 (expression -> CADENA .)
    OR              reduce using rule 85 (expression -> CADENA .)
    PUNTO           reduce using rule 85 (expression -> CADENA .)
    TERN            reduce using rule 85 (expression -> CADENA .)
    PARDER          reduce using rule 85 (expression -> CADENA .)
    COMA            reduce using rule 85 (expression -> CADENA .)
    CORDER          reduce using rule 85 (expression -> CADENA .)
    DOSPUNTOS       reduce using rule 85 (expression -> CADENA .)
    LLAVEDER        reduce using rule 85 (expression -> CADENA .)


state 55

    (86) expression -> DECIMAL .

    PUNTOCOMA       reduce using rule 86 (expression -> DECIMAL .)
    MAS             reduce using rule 86 (expression -> DECIMAL .)
    MENOS           reduce using rule 86 (expression -> DECIMAL .)
    POR             reduce using rule 86 (expression -> DECIMAL .)
    DIVIDIDO        reduce using rule 86 (expression -> DECIMAL .)
    MOD             reduce using rule 86 (expression -> DECIMAL .)
    MENOR           reduce using rule 86 (expression -> DECIMAL .)
    MAYOR           reduce using rule 86 (expression -> DECIMAL .)
    MENORIG         reduce using rule 86 (expression -> DECIMAL .)
    MAYORIG         reduce using rule 86 (expression -> DECIMAL .)
    IGUALDAD        reduce using rule 86 (expression -> DECIMAL .)
    DIF             reduce using rule 86 (expression -> DECIMAL .)
    AND             reduce using rule 86 (expression -> DECIMAL .)
    OR              reduce using rule 86 (expression -> DECIMAL .)
    PUNTO           reduce using rule 86 (expression -> DECIMAL .)
    TERN            reduce using rule 86 (expression -> DECIMAL .)
    PARDER          reduce using rule 86 (expression -> DECIMAL .)
    COMA            reduce using rule 86 (expression -> DECIMAL .)
    CORDER          reduce using rule 86 (expression -> DECIMAL .)
    DOSPUNTOS       reduce using rule 86 (expression -> DECIMAL .)
    LLAVEDER        reduce using rule 86 (expression -> DECIMAL .)


state 56

    (87) expression -> BOOLEANO .

    PUNTOCOMA       reduce using rule 87 (expression -> BOOLEANO .)
    MAS             reduce using rule 87 (expression -> BOOLEANO .)
    MENOS           reduce using rule 87 (expression -> BOOLEANO .)
    POR             reduce using rule 87 (expression -> BOOLEANO .)
    DIVIDIDO        reduce using rule 87 (expression -> BOOLEANO .)
    MOD             reduce using rule 87 (expression -> BOOLEANO .)
    MENOR           reduce using rule 87 (expression -> BOOLEANO .)
    MAYOR           reduce using rule 87 (expression -> BOOLEANO .)
    MENORIG         reduce using rule 87 (expression -> BOOLEANO .)
    MAYORIG         reduce using rule 87 (expression -> BOOLEANO .)
    IGUALDAD        reduce using rule 87 (expression -> BOOLEANO .)
    DIF             reduce using rule 87 (expression -> BOOLEANO .)
    AND             reduce using rule 87 (expression -> BOOLEANO .)
    OR              reduce using rule 87 (expression -> BOOLEANO .)
    PUNTO           reduce using rule 87 (expression -> BOOLEANO .)
    TERN            reduce using rule 87 (expression -> BOOLEANO .)
    PARDER          reduce using rule 87 (expression -> BOOLEANO .)
    COMA            reduce using rule 87 (expression -> BOOLEANO .)
    CORDER          reduce using rule 87 (expression -> BOOLEANO .)
    DOSPUNTOS       reduce using rule 87 (expression -> BOOLEANO .)
    LLAVEDER        reduce using rule 87 (expression -> BOOLEANO .)


state 57

    (88) expression -> listArray .

    PUNTOCOMA       reduce using rule 88 (expression -> listArray .)
    MAS             reduce using rule 88 (expression -> listArray .)
    MENOS           reduce using rule 88 (expression -> listArray .)
    POR             reduce using rule 88 (expression -> listArray .)
    DIVIDIDO        reduce using rule 88 (expression -> listArray .)
    MOD             reduce using rule 88 (expression -> listArray .)
    MENOR           reduce using rule 88 (expression -> listArray .)
    MAYOR           reduce using rule 88 (expression -> listArray .)
    MENORIG         reduce using rule 88 (expression -> listArray .)
    MAYORIG         reduce using rule 88 (expression -> listArray .)
    IGUALDAD        reduce using rule 88 (expression -> listArray .)
    DIF             reduce using rule 88 (expression -> listArray .)
    AND             reduce using rule 88 (expression -> listArray .)
    OR              reduce using rule 88 (expression -> listArray .)
    PUNTO           reduce using rule 88 (expression -> listArray .)
    TERN            reduce using rule 88 (expression -> listArray .)
    PARDER          reduce using rule 88 (expression -> listArray .)
    COMA            reduce using rule 88 (expression -> listArray .)
    CORDER          reduce using rule 88 (expression -> listArray .)
    DOSPUNTOS       reduce using rule 88 (expression -> listArray .)
    LLAVEDER        reduce using rule 88 (expression -> listArray .)


state 58

    (89) expression -> CORIZQ . expressionList CORDER
    (60) expressionList -> . expressionList COMA expression
    (61) expressionList -> . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expressionList                 shift and go to state 100
    expression                     shift and go to state 69
    listArray                      shift and go to state 57

state 59

    (47) interfacecreation -> INTERFACE ID . LLAVEIZQ attributeList LLAVEDER PUNTOCOMA

    LLAVEIZQ        shift and go to state 101


state 60

    (23) switch_statement -> SWITCH PARIZQ . expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> SWITCH PARIZQ . expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 102
    listArray                      shift and go to state 57

state 61

    (19) print -> CONSOLE PUNTO LOG . PARIZQ expressionList PARDER PUNTOCOMA

    PARIZQ          shift and go to state 103


state 62

    (20) ifinstruction -> IF PARIZQ expression . PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> IF PARIZQ expression . PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> IF PARIZQ expression . PARDER LLAVEIZQ block LLAVEDER
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PARDER          shift and go to state 104
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 63

    (29) whileinstruction -> WHILE PARIZQ expression . PARDER LLAVEIZQ block LLAVEDER
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PARDER          shift and go to state 105
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 64

    (32) declaration -> VAR ID DOSPUNTOS . type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> VAR ID DOSPUNTOS . type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (36) interdeclaration -> VAR ID DOSPUNTOS . ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA
    (56) type -> . NUMBER
    (57) type -> . FLOAT
    (58) type -> . STRING
    (59) type -> . BOOL

    ID              shift and go to state 106
    NUMBER          shift and go to state 108
    FLOAT           shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111

    type                           shift and go to state 107

state 65

    (33) declaration -> VAR ID IGUAL . expression PUNTOCOMA
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 112
    listArray                      shift and go to state 57

state 66

    (39) assignment -> ID IGUAL expression . PUNTOCOMA
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       shift and go to state 113
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 67

    (42) call -> ID PARIZQ expressionList . PARDER PUNTOCOMA
    (60) expressionList -> expressionList . COMA expression

    PARDER          shift and go to state 114
    COMA            shift and go to state 115


state 68

    (43) call -> ID PARIZQ PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 116


state 69

    (61) expressionList -> expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PARDER          reduce using rule 61 (expressionList -> expression .)
    COMA            reduce using rule 61 (expressionList -> expression .)
    CORDER          reduce using rule 61 (expressionList -> expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 70

    (34) declaration -> CONST ID DOSPUNTOS . type IGUAL expression PUNTOCOMA
    (56) type -> . NUMBER
    (57) type -> . FLOAT
    (58) type -> . STRING
    (59) type -> . BOOL

    NUMBER          shift and go to state 108
    FLOAT           shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111

    type                           shift and go to state 117

state 71

    (31) forinstruction -> FOR PARIZQ declaration . expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 118
    listArray                      shift and go to state 57

state 72

    (32) declaration -> VAR . ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> VAR . ID IGUAL expression PUNTOCOMA

    ID              shift and go to state 119


state 73

    (44) functionstmt -> FUNC ID funcparams . functype LLAVEIZQ block LLAVEDER
    (52) functype -> . DOSPUNTOS type
    (53) functype -> .

    DOSPUNTOS       shift and go to state 121
    LLAVEIZQ        reduce using rule 53 (functype -> .)

    functype                       shift and go to state 120

state 74

    (45) funcparams -> PARIZQ . paramsList PARDER
    (46) funcparams -> PARIZQ . PARDER
    (50) paramsList -> . paramsList COMA ID DOSPUNTOS type
    (51) paramsList -> . ID DOSPUNTOS type

    PARDER          shift and go to state 123
    ID              shift and go to state 124

    paramsList                     shift and go to state 122

state 75

    (40) returnstmt -> RETURN expression PUNTOCOMA .

    CONSOLE         reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    IF              reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    WHILE           reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    VAR             reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    CONST           reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    FOR             reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    ID              reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    BREAK           reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    CONTINUE        reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    FUNC            reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    RETURN          reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    INTERFACE       reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    SWITCH          reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    $end            reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    LLAVEDER        reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    DEFAULT         reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)
    CASE            reduce using rule 40 (returnstmt -> RETURN expression PUNTOCOMA .)


state 76

    (62) expression -> expression MAS . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 125
    listArray                      shift and go to state 57

state 77

    (63) expression -> expression MENOS . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 126
    listArray                      shift and go to state 57

state 78

    (64) expression -> expression POR . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 127
    listArray                      shift and go to state 57

state 79

    (65) expression -> expression DIVIDIDO . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 128
    listArray                      shift and go to state 57

state 80

    (66) expression -> expression MOD . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 129
    listArray                      shift and go to state 57

state 81

    (68) expression -> expression MENOR . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 130
    listArray                      shift and go to state 57

state 82

    (69) expression -> expression MAYOR . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 131
    listArray                      shift and go to state 57

state 83

    (70) expression -> expression MENORIG . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 132
    listArray                      shift and go to state 57

state 84

    (71) expression -> expression MAYORIG . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 133
    listArray                      shift and go to state 57

state 85

    (72) expression -> expression IGUALDAD . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 134
    listArray                      shift and go to state 57

state 86

    (73) expression -> expression DIF . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 135
    listArray                      shift and go to state 57

state 87

    (74) expression -> expression AND . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 136
    listArray                      shift and go to state 57

state 88

    (75) expression -> expression OR . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 137
    listArray                      shift and go to state 57

state 89

    (80) expression -> expression PUNTO . TOSTRING PARIZQ PARDER

    TOSTRING        shift and go to state 138


state 90

    (83) expression -> expression TERN . expression DOSPUNTOS expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 139
    listArray                      shift and go to state 57

state 91

    (67) expression -> MENOS expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       reduce using rule 67 (expression -> MENOS expression .)
    MAS             reduce using rule 67 (expression -> MENOS expression .)
    MENOS           reduce using rule 67 (expression -> MENOS expression .)
    MENOR           reduce using rule 67 (expression -> MENOS expression .)
    MAYOR           reduce using rule 67 (expression -> MENOS expression .)
    MENORIG         reduce using rule 67 (expression -> MENOS expression .)
    MAYORIG         reduce using rule 67 (expression -> MENOS expression .)
    IGUALDAD        reduce using rule 67 (expression -> MENOS expression .)
    DIF             reduce using rule 67 (expression -> MENOS expression .)
    AND             reduce using rule 67 (expression -> MENOS expression .)
    OR              reduce using rule 67 (expression -> MENOS expression .)
    PUNTO           reduce using rule 67 (expression -> MENOS expression .)
    TERN            reduce using rule 67 (expression -> MENOS expression .)
    PARDER          reduce using rule 67 (expression -> MENOS expression .)
    COMA            reduce using rule 67 (expression -> MENOS expression .)
    CORDER          reduce using rule 67 (expression -> MENOS expression .)
    DOSPUNTOS       reduce using rule 67 (expression -> MENOS expression .)
    LLAVEDER        reduce using rule 67 (expression -> MENOS expression .)
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80

  ! POR             [ reduce using rule 67 (expression -> MENOS expression .) ]
  ! DIVIDIDO        [ reduce using rule 67 (expression -> MENOS expression .) ]
  ! MOD             [ reduce using rule 67 (expression -> MENOS expression .) ]
  ! MAS             [ shift and go to state 76 ]
  ! MENOS           [ shift and go to state 77 ]
  ! MENOR           [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENORIG         [ shift and go to state 83 ]
  ! MAYORIG         [ shift and go to state 84 ]
  ! IGUALDAD        [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! PUNTO           [ shift and go to state 89 ]
  ! TERN            [ shift and go to state 90 ]


state 92

    (76) expression -> NOT expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for IGUALDAD resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PUNTO resolved as shift
  ! shift/reduce conflict for TERN resolved as shift
    PUNTOCOMA       reduce using rule 76 (expression -> NOT expression .)
    PARDER          reduce using rule 76 (expression -> NOT expression .)
    COMA            reduce using rule 76 (expression -> NOT expression .)
    CORDER          reduce using rule 76 (expression -> NOT expression .)
    DOSPUNTOS       reduce using rule 76 (expression -> NOT expression .)
    LLAVEDER        reduce using rule 76 (expression -> NOT expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90

  ! MAS             [ reduce using rule 76 (expression -> NOT expression .) ]
  ! MENOS           [ reduce using rule 76 (expression -> NOT expression .) ]
  ! POR             [ reduce using rule 76 (expression -> NOT expression .) ]
  ! DIVIDIDO        [ reduce using rule 76 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 76 (expression -> NOT expression .) ]
  ! MENOR           [ reduce using rule 76 (expression -> NOT expression .) ]
  ! MAYOR           [ reduce using rule 76 (expression -> NOT expression .) ]
  ! MENORIG         [ reduce using rule 76 (expression -> NOT expression .) ]
  ! MAYORIG         [ reduce using rule 76 (expression -> NOT expression .) ]
  ! IGUALDAD        [ reduce using rule 76 (expression -> NOT expression .) ]
  ! DIF             [ reduce using rule 76 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 76 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 76 (expression -> NOT expression .) ]
  ! PUNTO           [ reduce using rule 76 (expression -> NOT expression .) ]
  ! TERN            [ reduce using rule 76 (expression -> NOT expression .) ]


state 93

    (77) expression -> PARIZQ expression . PARDER
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PARDER          shift and go to state 140
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 94

    (78) expression -> PARSEINT PARIZQ . expression PARDER
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 141
    listArray                      shift and go to state 57

state 95

    (79) expression -> PARSEFLOAT PARIZQ . expression PARDER
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 142
    listArray                      shift and go to state 57

state 96

    (81) expression -> ID PUNTO . TOSTRING PARIZQ PARDER

    TOSTRING        shift and go to state 143


state 97

    (90) expression -> ID PARIZQ . expressionList PARDER
    (91) expression -> ID PARIZQ . PARDER
    (60) expressionList -> . expressionList COMA expression
    (61) expressionList -> . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    PARDER          shift and go to state 145
    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expressionList                 shift and go to state 144
    expression                     shift and go to state 69
    listArray                      shift and go to state 57

state 98

    (92) listArray -> ID CORIZQ . expression CORDER
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 146
    listArray                      shift and go to state 57

state 99

    (82) expression -> TYPEOF expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for IGUALDAD resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PUNTO resolved as shift
  ! shift/reduce conflict for TERN resolved as shift
    PUNTOCOMA       reduce using rule 82 (expression -> TYPEOF expression .)
    PARDER          reduce using rule 82 (expression -> TYPEOF expression .)
    COMA            reduce using rule 82 (expression -> TYPEOF expression .)
    CORDER          reduce using rule 82 (expression -> TYPEOF expression .)
    DOSPUNTOS       reduce using rule 82 (expression -> TYPEOF expression .)
    LLAVEDER        reduce using rule 82 (expression -> TYPEOF expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90

  ! MAS             [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! MENOS           [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! POR             [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! DIVIDIDO        [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! MOD             [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! MENOR           [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! MAYOR           [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! MENORIG         [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! MAYORIG         [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! IGUALDAD        [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! DIF             [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! AND             [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! OR              [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! PUNTO           [ reduce using rule 82 (expression -> TYPEOF expression .) ]
  ! TERN            [ reduce using rule 82 (expression -> TYPEOF expression .) ]


state 100

    (89) expression -> CORIZQ expressionList . CORDER
    (60) expressionList -> expressionList . COMA expression

    CORDER          shift and go to state 147
    COMA            shift and go to state 115


state 101

    (47) interfacecreation -> INTERFACE ID LLAVEIZQ . attributeList LLAVEDER PUNTOCOMA
    (48) attributeList -> . attributeList ID DOSPUNTOS type PUNTOCOMA
    (49) attributeList -> . ID DOSPUNTOS type PUNTOCOMA

    ID              shift and go to state 148

    attributeList                  shift and go to state 149

state 102

    (23) switch_statement -> SWITCH PARIZQ expression . PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> SWITCH PARIZQ expression . PARDER LLAVEIZQ cases_statement LLAVEDER
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PARDER          shift and go to state 150
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 103

    (19) print -> CONSOLE PUNTO LOG PARIZQ . expressionList PARDER PUNTOCOMA
    (60) expressionList -> . expressionList COMA expression
    (61) expressionList -> . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expressionList                 shift and go to state 151
    expression                     shift and go to state 69
    listArray                      shift and go to state 57

state 104

    (20) ifinstruction -> IF PARIZQ expression PARDER . LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> IF PARIZQ expression PARDER . LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> IF PARIZQ expression PARDER . LLAVEIZQ block LLAVEDER

    LLAVEIZQ        shift and go to state 152


state 105

    (29) whileinstruction -> WHILE PARIZQ expression PARDER . LLAVEIZQ block LLAVEDER

    LLAVEIZQ        shift and go to state 153


state 106

    (36) interdeclaration -> VAR ID DOSPUNTOS ID . IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    IGUAL           shift and go to state 154


state 107

    (32) declaration -> VAR ID DOSPUNTOS type . IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> VAR ID DOSPUNTOS type . CORIZQ CORDER IGUAL expression PUNTOCOMA

    IGUAL           shift and go to state 155
    CORIZQ          shift and go to state 156


state 108

    (56) type -> NUMBER .

    IGUAL           reduce using rule 56 (type -> NUMBER .)
    CORIZQ          reduce using rule 56 (type -> NUMBER .)
    LLAVEIZQ        reduce using rule 56 (type -> NUMBER .)
    PARDER          reduce using rule 56 (type -> NUMBER .)
    COMA            reduce using rule 56 (type -> NUMBER .)
    PUNTOCOMA       reduce using rule 56 (type -> NUMBER .)


state 109

    (57) type -> FLOAT .

    IGUAL           reduce using rule 57 (type -> FLOAT .)
    CORIZQ          reduce using rule 57 (type -> FLOAT .)
    LLAVEIZQ        reduce using rule 57 (type -> FLOAT .)
    PARDER          reduce using rule 57 (type -> FLOAT .)
    COMA            reduce using rule 57 (type -> FLOAT .)
    PUNTOCOMA       reduce using rule 57 (type -> FLOAT .)


state 110

    (58) type -> STRING .

    IGUAL           reduce using rule 58 (type -> STRING .)
    CORIZQ          reduce using rule 58 (type -> STRING .)
    LLAVEIZQ        reduce using rule 58 (type -> STRING .)
    PARDER          reduce using rule 58 (type -> STRING .)
    COMA            reduce using rule 58 (type -> STRING .)
    PUNTOCOMA       reduce using rule 58 (type -> STRING .)


state 111

    (59) type -> BOOL .

    IGUAL           reduce using rule 59 (type -> BOOL .)
    CORIZQ          reduce using rule 59 (type -> BOOL .)
    LLAVEIZQ        reduce using rule 59 (type -> BOOL .)
    PARDER          reduce using rule 59 (type -> BOOL .)
    COMA            reduce using rule 59 (type -> BOOL .)
    PUNTOCOMA       reduce using rule 59 (type -> BOOL .)


state 112

    (33) declaration -> VAR ID IGUAL expression . PUNTOCOMA
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       shift and go to state 157
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 113

    (39) assignment -> ID IGUAL expression PUNTOCOMA .

    CONSOLE         reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    IF              reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    WHILE           reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    VAR             reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    CONST           reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    FOR             reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    ID              reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    BREAK           reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    CONTINUE        reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    FUNC            reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    RETURN          reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    INTERFACE       reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    SWITCH          reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    $end            reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    LLAVEDER        reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    DEFAULT         reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)
    CASE            reduce using rule 39 (assignment -> ID IGUAL expression PUNTOCOMA .)


state 114

    (42) call -> ID PARIZQ expressionList PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 158


state 115

    (60) expressionList -> expressionList COMA . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 159
    listArray                      shift and go to state 57

state 116

    (43) call -> ID PARIZQ PARDER PUNTOCOMA .

    CONSOLE         reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    IF              reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    WHILE           reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    VAR             reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    CONST           reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    FOR             reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    ID              reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    BREAK           reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    CONTINUE        reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    FUNC            reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    RETURN          reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    INTERFACE       reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    SWITCH          reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    $end            reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    LLAVEDER        reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    DEFAULT         reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)
    CASE            reduce using rule 43 (call -> ID PARIZQ PARDER PUNTOCOMA .)


state 117

    (34) declaration -> CONST ID DOSPUNTOS type . IGUAL expression PUNTOCOMA

    IGUAL           shift and go to state 160


state 118

    (31) forinstruction -> FOR PARIZQ declaration expression . PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       shift and go to state 161
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 119

    (32) declaration -> VAR ID . DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> VAR ID . IGUAL expression PUNTOCOMA

    DOSPUNTOS       shift and go to state 162
    IGUAL           shift and go to state 65


state 120

    (44) functionstmt -> FUNC ID funcparams functype . LLAVEIZQ block LLAVEDER

    LLAVEIZQ        shift and go to state 163


state 121

    (52) functype -> DOSPUNTOS . type
    (56) type -> . NUMBER
    (57) type -> . FLOAT
    (58) type -> . STRING
    (59) type -> . BOOL

    NUMBER          shift and go to state 108
    FLOAT           shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111

    type                           shift and go to state 164

state 122

    (45) funcparams -> PARIZQ paramsList . PARDER
    (50) paramsList -> paramsList . COMA ID DOSPUNTOS type

    PARDER          shift and go to state 165
    COMA            shift and go to state 166


state 123

    (46) funcparams -> PARIZQ PARDER .

    DOSPUNTOS       reduce using rule 46 (funcparams -> PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 46 (funcparams -> PARIZQ PARDER .)


state 124

    (51) paramsList -> ID . DOSPUNTOS type

    DOSPUNTOS       shift and go to state 167


state 125

    (62) expression -> expression MAS expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       reduce using rule 62 (expression -> expression MAS expression .)
    MAS             reduce using rule 62 (expression -> expression MAS expression .)
    MENOS           reduce using rule 62 (expression -> expression MAS expression .)
    MENOR           reduce using rule 62 (expression -> expression MAS expression .)
    MAYOR           reduce using rule 62 (expression -> expression MAS expression .)
    MENORIG         reduce using rule 62 (expression -> expression MAS expression .)
    MAYORIG         reduce using rule 62 (expression -> expression MAS expression .)
    IGUALDAD        reduce using rule 62 (expression -> expression MAS expression .)
    DIF             reduce using rule 62 (expression -> expression MAS expression .)
    AND             reduce using rule 62 (expression -> expression MAS expression .)
    OR              reduce using rule 62 (expression -> expression MAS expression .)
    PUNTO           reduce using rule 62 (expression -> expression MAS expression .)
    TERN            reduce using rule 62 (expression -> expression MAS expression .)
    PARDER          reduce using rule 62 (expression -> expression MAS expression .)
    COMA            reduce using rule 62 (expression -> expression MAS expression .)
    CORDER          reduce using rule 62 (expression -> expression MAS expression .)
    DOSPUNTOS       reduce using rule 62 (expression -> expression MAS expression .)
    LLAVEDER        reduce using rule 62 (expression -> expression MAS expression .)
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80

  ! POR             [ reduce using rule 62 (expression -> expression MAS expression .) ]
  ! DIVIDIDO        [ reduce using rule 62 (expression -> expression MAS expression .) ]
  ! MOD             [ reduce using rule 62 (expression -> expression MAS expression .) ]
  ! MAS             [ shift and go to state 76 ]
  ! MENOS           [ shift and go to state 77 ]
  ! MENOR           [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENORIG         [ shift and go to state 83 ]
  ! MAYORIG         [ shift and go to state 84 ]
  ! IGUALDAD        [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! PUNTO           [ shift and go to state 89 ]
  ! TERN            [ shift and go to state 90 ]


state 126

    (63) expression -> expression MENOS expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       reduce using rule 63 (expression -> expression MENOS expression .)
    MAS             reduce using rule 63 (expression -> expression MENOS expression .)
    MENOS           reduce using rule 63 (expression -> expression MENOS expression .)
    MENOR           reduce using rule 63 (expression -> expression MENOS expression .)
    MAYOR           reduce using rule 63 (expression -> expression MENOS expression .)
    MENORIG         reduce using rule 63 (expression -> expression MENOS expression .)
    MAYORIG         reduce using rule 63 (expression -> expression MENOS expression .)
    IGUALDAD        reduce using rule 63 (expression -> expression MENOS expression .)
    DIF             reduce using rule 63 (expression -> expression MENOS expression .)
    AND             reduce using rule 63 (expression -> expression MENOS expression .)
    OR              reduce using rule 63 (expression -> expression MENOS expression .)
    PUNTO           reduce using rule 63 (expression -> expression MENOS expression .)
    TERN            reduce using rule 63 (expression -> expression MENOS expression .)
    PARDER          reduce using rule 63 (expression -> expression MENOS expression .)
    COMA            reduce using rule 63 (expression -> expression MENOS expression .)
    CORDER          reduce using rule 63 (expression -> expression MENOS expression .)
    DOSPUNTOS       reduce using rule 63 (expression -> expression MENOS expression .)
    LLAVEDER        reduce using rule 63 (expression -> expression MENOS expression .)
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80

  ! POR             [ reduce using rule 63 (expression -> expression MENOS expression .) ]
  ! DIVIDIDO        [ reduce using rule 63 (expression -> expression MENOS expression .) ]
  ! MOD             [ reduce using rule 63 (expression -> expression MENOS expression .) ]
  ! MAS             [ shift and go to state 76 ]
  ! MENOS           [ shift and go to state 77 ]
  ! MENOR           [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENORIG         [ shift and go to state 83 ]
  ! MAYORIG         [ shift and go to state 84 ]
  ! IGUALDAD        [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! PUNTO           [ shift and go to state 89 ]
  ! TERN            [ shift and go to state 90 ]


state 127

    (64) expression -> expression POR expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       reduce using rule 64 (expression -> expression POR expression .)
    MAS             reduce using rule 64 (expression -> expression POR expression .)
    MENOS           reduce using rule 64 (expression -> expression POR expression .)
    POR             reduce using rule 64 (expression -> expression POR expression .)
    DIVIDIDO        reduce using rule 64 (expression -> expression POR expression .)
    MOD             reduce using rule 64 (expression -> expression POR expression .)
    MENOR           reduce using rule 64 (expression -> expression POR expression .)
    MAYOR           reduce using rule 64 (expression -> expression POR expression .)
    MENORIG         reduce using rule 64 (expression -> expression POR expression .)
    MAYORIG         reduce using rule 64 (expression -> expression POR expression .)
    IGUALDAD        reduce using rule 64 (expression -> expression POR expression .)
    DIF             reduce using rule 64 (expression -> expression POR expression .)
    AND             reduce using rule 64 (expression -> expression POR expression .)
    OR              reduce using rule 64 (expression -> expression POR expression .)
    PUNTO           reduce using rule 64 (expression -> expression POR expression .)
    TERN            reduce using rule 64 (expression -> expression POR expression .)
    PARDER          reduce using rule 64 (expression -> expression POR expression .)
    COMA            reduce using rule 64 (expression -> expression POR expression .)
    CORDER          reduce using rule 64 (expression -> expression POR expression .)
    DOSPUNTOS       reduce using rule 64 (expression -> expression POR expression .)
    LLAVEDER        reduce using rule 64 (expression -> expression POR expression .)

  ! MAS             [ shift and go to state 76 ]
  ! MENOS           [ shift and go to state 77 ]
  ! POR             [ shift and go to state 78 ]
  ! DIVIDIDO        [ shift and go to state 79 ]
  ! MOD             [ shift and go to state 80 ]
  ! MENOR           [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENORIG         [ shift and go to state 83 ]
  ! MAYORIG         [ shift and go to state 84 ]
  ! IGUALDAD        [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! PUNTO           [ shift and go to state 89 ]
  ! TERN            [ shift and go to state 90 ]


state 128

    (65) expression -> expression DIVIDIDO expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    MAS             reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    MENOS           reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    POR             reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    DIVIDIDO        reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    MOD             reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    MENOR           reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    MAYOR           reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    MENORIG         reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    MAYORIG         reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    IGUALDAD        reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    DIF             reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    AND             reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    OR              reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    PUNTO           reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    TERN            reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    PARDER          reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    COMA            reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    CORDER          reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    DOSPUNTOS       reduce using rule 65 (expression -> expression DIVIDIDO expression .)
    LLAVEDER        reduce using rule 65 (expression -> expression DIVIDIDO expression .)

  ! MAS             [ shift and go to state 76 ]
  ! MENOS           [ shift and go to state 77 ]
  ! POR             [ shift and go to state 78 ]
  ! DIVIDIDO        [ shift and go to state 79 ]
  ! MOD             [ shift and go to state 80 ]
  ! MENOR           [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENORIG         [ shift and go to state 83 ]
  ! MAYORIG         [ shift and go to state 84 ]
  ! IGUALDAD        [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! PUNTO           [ shift and go to state 89 ]
  ! TERN            [ shift and go to state 90 ]


state 129

    (66) expression -> expression MOD expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       reduce using rule 66 (expression -> expression MOD expression .)
    MAS             reduce using rule 66 (expression -> expression MOD expression .)
    MENOS           reduce using rule 66 (expression -> expression MOD expression .)
    POR             reduce using rule 66 (expression -> expression MOD expression .)
    DIVIDIDO        reduce using rule 66 (expression -> expression MOD expression .)
    MOD             reduce using rule 66 (expression -> expression MOD expression .)
    MENOR           reduce using rule 66 (expression -> expression MOD expression .)
    MAYOR           reduce using rule 66 (expression -> expression MOD expression .)
    MENORIG         reduce using rule 66 (expression -> expression MOD expression .)
    MAYORIG         reduce using rule 66 (expression -> expression MOD expression .)
    IGUALDAD        reduce using rule 66 (expression -> expression MOD expression .)
    DIF             reduce using rule 66 (expression -> expression MOD expression .)
    AND             reduce using rule 66 (expression -> expression MOD expression .)
    OR              reduce using rule 66 (expression -> expression MOD expression .)
    PUNTO           reduce using rule 66 (expression -> expression MOD expression .)
    TERN            reduce using rule 66 (expression -> expression MOD expression .)
    PARDER          reduce using rule 66 (expression -> expression MOD expression .)
    COMA            reduce using rule 66 (expression -> expression MOD expression .)
    CORDER          reduce using rule 66 (expression -> expression MOD expression .)
    DOSPUNTOS       reduce using rule 66 (expression -> expression MOD expression .)
    LLAVEDER        reduce using rule 66 (expression -> expression MOD expression .)

  ! MAS             [ shift and go to state 76 ]
  ! MENOS           [ shift and go to state 77 ]
  ! POR             [ shift and go to state 78 ]
  ! DIVIDIDO        [ shift and go to state 79 ]
  ! MOD             [ shift and go to state 80 ]
  ! MENOR           [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENORIG         [ shift and go to state 83 ]
  ! MAYORIG         [ shift and go to state 84 ]
  ! IGUALDAD        [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! PUNTO           [ shift and go to state 89 ]
  ! TERN            [ shift and go to state 90 ]


state 130

    (68) expression -> expression MENOR expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       reduce using rule 68 (expression -> expression MENOR expression .)
    MENOR           reduce using rule 68 (expression -> expression MENOR expression .)
    MAYOR           reduce using rule 68 (expression -> expression MENOR expression .)
    DIF             reduce using rule 68 (expression -> expression MENOR expression .)
    AND             reduce using rule 68 (expression -> expression MENOR expression .)
    OR              reduce using rule 68 (expression -> expression MENOR expression .)
    PUNTO           reduce using rule 68 (expression -> expression MENOR expression .)
    TERN            reduce using rule 68 (expression -> expression MENOR expression .)
    PARDER          reduce using rule 68 (expression -> expression MENOR expression .)
    COMA            reduce using rule 68 (expression -> expression MENOR expression .)
    CORDER          reduce using rule 68 (expression -> expression MENOR expression .)
    DOSPUNTOS       reduce using rule 68 (expression -> expression MENOR expression .)
    LLAVEDER        reduce using rule 68 (expression -> expression MENOR expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85

  ! MAS             [ reduce using rule 68 (expression -> expression MENOR expression .) ]
  ! MENOS           [ reduce using rule 68 (expression -> expression MENOR expression .) ]
  ! POR             [ reduce using rule 68 (expression -> expression MENOR expression .) ]
  ! DIVIDIDO        [ reduce using rule 68 (expression -> expression MENOR expression .) ]
  ! MOD             [ reduce using rule 68 (expression -> expression MENOR expression .) ]
  ! MENORIG         [ reduce using rule 68 (expression -> expression MENOR expression .) ]
  ! MAYORIG         [ reduce using rule 68 (expression -> expression MENOR expression .) ]
  ! IGUALDAD        [ reduce using rule 68 (expression -> expression MENOR expression .) ]
  ! MENOR           [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! PUNTO           [ shift and go to state 89 ]
  ! TERN            [ shift and go to state 90 ]


state 131

    (69) expression -> expression MAYOR expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       reduce using rule 69 (expression -> expression MAYOR expression .)
    MENOR           reduce using rule 69 (expression -> expression MAYOR expression .)
    MAYOR           reduce using rule 69 (expression -> expression MAYOR expression .)
    DIF             reduce using rule 69 (expression -> expression MAYOR expression .)
    AND             reduce using rule 69 (expression -> expression MAYOR expression .)
    OR              reduce using rule 69 (expression -> expression MAYOR expression .)
    PUNTO           reduce using rule 69 (expression -> expression MAYOR expression .)
    TERN            reduce using rule 69 (expression -> expression MAYOR expression .)
    PARDER          reduce using rule 69 (expression -> expression MAYOR expression .)
    COMA            reduce using rule 69 (expression -> expression MAYOR expression .)
    CORDER          reduce using rule 69 (expression -> expression MAYOR expression .)
    DOSPUNTOS       reduce using rule 69 (expression -> expression MAYOR expression .)
    LLAVEDER        reduce using rule 69 (expression -> expression MAYOR expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85

  ! MAS             [ reduce using rule 69 (expression -> expression MAYOR expression .) ]
  ! MENOS           [ reduce using rule 69 (expression -> expression MAYOR expression .) ]
  ! POR             [ reduce using rule 69 (expression -> expression MAYOR expression .) ]
  ! DIVIDIDO        [ reduce using rule 69 (expression -> expression MAYOR expression .) ]
  ! MOD             [ reduce using rule 69 (expression -> expression MAYOR expression .) ]
  ! MENORIG         [ reduce using rule 69 (expression -> expression MAYOR expression .) ]
  ! MAYORIG         [ reduce using rule 69 (expression -> expression MAYOR expression .) ]
  ! IGUALDAD        [ reduce using rule 69 (expression -> expression MAYOR expression .) ]
  ! MENOR           [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! PUNTO           [ shift and go to state 89 ]
  ! TERN            [ shift and go to state 90 ]


state 132

    (70) expression -> expression MENORIG expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       reduce using rule 70 (expression -> expression MENORIG expression .)
    MENOR           reduce using rule 70 (expression -> expression MENORIG expression .)
    MAYOR           reduce using rule 70 (expression -> expression MENORIG expression .)
    MENORIG         reduce using rule 70 (expression -> expression MENORIG expression .)
    MAYORIG         reduce using rule 70 (expression -> expression MENORIG expression .)
    DIF             reduce using rule 70 (expression -> expression MENORIG expression .)
    AND             reduce using rule 70 (expression -> expression MENORIG expression .)
    OR              reduce using rule 70 (expression -> expression MENORIG expression .)
    PUNTO           reduce using rule 70 (expression -> expression MENORIG expression .)
    TERN            reduce using rule 70 (expression -> expression MENORIG expression .)
    PARDER          reduce using rule 70 (expression -> expression MENORIG expression .)
    COMA            reduce using rule 70 (expression -> expression MENORIG expression .)
    CORDER          reduce using rule 70 (expression -> expression MENORIG expression .)
    DOSPUNTOS       reduce using rule 70 (expression -> expression MENORIG expression .)
    LLAVEDER        reduce using rule 70 (expression -> expression MENORIG expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    IGUALDAD        shift and go to state 85

  ! MAS             [ reduce using rule 70 (expression -> expression MENORIG expression .) ]
  ! MENOS           [ reduce using rule 70 (expression -> expression MENORIG expression .) ]
  ! POR             [ reduce using rule 70 (expression -> expression MENORIG expression .) ]
  ! DIVIDIDO        [ reduce using rule 70 (expression -> expression MENORIG expression .) ]
  ! MOD             [ reduce using rule 70 (expression -> expression MENORIG expression .) ]
  ! IGUALDAD        [ reduce using rule 70 (expression -> expression MENORIG expression .) ]
  ! MENOR           [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENORIG         [ shift and go to state 83 ]
  ! MAYORIG         [ shift and go to state 84 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! PUNTO           [ shift and go to state 89 ]
  ! TERN            [ shift and go to state 90 ]


state 133

    (71) expression -> expression MAYORIG expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       reduce using rule 71 (expression -> expression MAYORIG expression .)
    MENOR           reduce using rule 71 (expression -> expression MAYORIG expression .)
    MAYOR           reduce using rule 71 (expression -> expression MAYORIG expression .)
    MENORIG         reduce using rule 71 (expression -> expression MAYORIG expression .)
    MAYORIG         reduce using rule 71 (expression -> expression MAYORIG expression .)
    DIF             reduce using rule 71 (expression -> expression MAYORIG expression .)
    AND             reduce using rule 71 (expression -> expression MAYORIG expression .)
    OR              reduce using rule 71 (expression -> expression MAYORIG expression .)
    PUNTO           reduce using rule 71 (expression -> expression MAYORIG expression .)
    TERN            reduce using rule 71 (expression -> expression MAYORIG expression .)
    PARDER          reduce using rule 71 (expression -> expression MAYORIG expression .)
    COMA            reduce using rule 71 (expression -> expression MAYORIG expression .)
    CORDER          reduce using rule 71 (expression -> expression MAYORIG expression .)
    DOSPUNTOS       reduce using rule 71 (expression -> expression MAYORIG expression .)
    LLAVEDER        reduce using rule 71 (expression -> expression MAYORIG expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    IGUALDAD        shift and go to state 85

  ! MAS             [ reduce using rule 71 (expression -> expression MAYORIG expression .) ]
  ! MENOS           [ reduce using rule 71 (expression -> expression MAYORIG expression .) ]
  ! POR             [ reduce using rule 71 (expression -> expression MAYORIG expression .) ]
  ! DIVIDIDO        [ reduce using rule 71 (expression -> expression MAYORIG expression .) ]
  ! MOD             [ reduce using rule 71 (expression -> expression MAYORIG expression .) ]
  ! IGUALDAD        [ reduce using rule 71 (expression -> expression MAYORIG expression .) ]
  ! MENOR           [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENORIG         [ shift and go to state 83 ]
  ! MAYORIG         [ shift and go to state 84 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! PUNTO           [ shift and go to state 89 ]
  ! TERN            [ shift and go to state 90 ]


state 134

    (72) expression -> expression IGUALDAD expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       reduce using rule 72 (expression -> expression IGUALDAD expression .)
    MENOR           reduce using rule 72 (expression -> expression IGUALDAD expression .)
    MAYOR           reduce using rule 72 (expression -> expression IGUALDAD expression .)
    MENORIG         reduce using rule 72 (expression -> expression IGUALDAD expression .)
    MAYORIG         reduce using rule 72 (expression -> expression IGUALDAD expression .)
    IGUALDAD        reduce using rule 72 (expression -> expression IGUALDAD expression .)
    DIF             reduce using rule 72 (expression -> expression IGUALDAD expression .)
    AND             reduce using rule 72 (expression -> expression IGUALDAD expression .)
    OR              reduce using rule 72 (expression -> expression IGUALDAD expression .)
    PUNTO           reduce using rule 72 (expression -> expression IGUALDAD expression .)
    TERN            reduce using rule 72 (expression -> expression IGUALDAD expression .)
    PARDER          reduce using rule 72 (expression -> expression IGUALDAD expression .)
    COMA            reduce using rule 72 (expression -> expression IGUALDAD expression .)
    CORDER          reduce using rule 72 (expression -> expression IGUALDAD expression .)
    DOSPUNTOS       reduce using rule 72 (expression -> expression IGUALDAD expression .)
    LLAVEDER        reduce using rule 72 (expression -> expression IGUALDAD expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80

  ! MAS             [ reduce using rule 72 (expression -> expression IGUALDAD expression .) ]
  ! MENOS           [ reduce using rule 72 (expression -> expression IGUALDAD expression .) ]
  ! POR             [ reduce using rule 72 (expression -> expression IGUALDAD expression .) ]
  ! DIVIDIDO        [ reduce using rule 72 (expression -> expression IGUALDAD expression .) ]
  ! MOD             [ reduce using rule 72 (expression -> expression IGUALDAD expression .) ]
  ! MENOR           [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENORIG         [ shift and go to state 83 ]
  ! MAYORIG         [ shift and go to state 84 ]
  ! IGUALDAD        [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! PUNTO           [ shift and go to state 89 ]
  ! TERN            [ shift and go to state 90 ]


state 135

    (73) expression -> expression DIF expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for IGUALDAD resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PUNTO resolved as shift
  ! shift/reduce conflict for TERN resolved as shift
    PUNTOCOMA       reduce using rule 73 (expression -> expression DIF expression .)
    PARDER          reduce using rule 73 (expression -> expression DIF expression .)
    COMA            reduce using rule 73 (expression -> expression DIF expression .)
    CORDER          reduce using rule 73 (expression -> expression DIF expression .)
    DOSPUNTOS       reduce using rule 73 (expression -> expression DIF expression .)
    LLAVEDER        reduce using rule 73 (expression -> expression DIF expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90

  ! MAS             [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! MENOS           [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! POR             [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! DIVIDIDO        [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! MOD             [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! MENOR           [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! MAYOR           [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! MENORIG         [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! MAYORIG         [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! IGUALDAD        [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! DIF             [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! AND             [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! OR              [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! PUNTO           [ reduce using rule 73 (expression -> expression DIF expression .) ]
  ! TERN            [ reduce using rule 73 (expression -> expression DIF expression .) ]


state 136

    (74) expression -> expression AND expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for IGUALDAD resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PUNTO resolved as shift
  ! shift/reduce conflict for TERN resolved as shift
    PUNTOCOMA       reduce using rule 74 (expression -> expression AND expression .)
    PARDER          reduce using rule 74 (expression -> expression AND expression .)
    COMA            reduce using rule 74 (expression -> expression AND expression .)
    CORDER          reduce using rule 74 (expression -> expression AND expression .)
    DOSPUNTOS       reduce using rule 74 (expression -> expression AND expression .)
    LLAVEDER        reduce using rule 74 (expression -> expression AND expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90

  ! MAS             [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! MENOS           [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! POR             [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! DIVIDIDO        [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! MENOR           [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! MAYOR           [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! MENORIG         [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! MAYORIG         [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! IGUALDAD        [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! DIF             [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! PUNTO           [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! TERN            [ reduce using rule 74 (expression -> expression AND expression .) ]


state 137

    (75) expression -> expression OR expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for IGUALDAD resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PUNTO resolved as shift
  ! shift/reduce conflict for TERN resolved as shift
    PUNTOCOMA       reduce using rule 75 (expression -> expression OR expression .)
    PARDER          reduce using rule 75 (expression -> expression OR expression .)
    COMA            reduce using rule 75 (expression -> expression OR expression .)
    CORDER          reduce using rule 75 (expression -> expression OR expression .)
    DOSPUNTOS       reduce using rule 75 (expression -> expression OR expression .)
    LLAVEDER        reduce using rule 75 (expression -> expression OR expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90

  ! MAS             [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! MENOS           [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! POR             [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! DIVIDIDO        [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! MENOR           [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! MAYOR           [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! MENORIG         [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! MAYORIG         [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! IGUALDAD        [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! DIF             [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! PUNTO           [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! TERN            [ reduce using rule 75 (expression -> expression OR expression .) ]


state 138

    (80) expression -> expression PUNTO TOSTRING . PARIZQ PARDER

    PARIZQ          shift and go to state 168


state 139

    (83) expression -> expression TERN expression . DOSPUNTOS expression
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    DOSPUNTOS       shift and go to state 169
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 140

    (77) expression -> PARIZQ expression PARDER .

    PUNTOCOMA       reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    MAS             reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    MENOS           reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    POR             reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    MOD             reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    MENOR           reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    MAYOR           reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    MENORIG         reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    MAYORIG         reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    IGUALDAD        reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    DIF             reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    AND             reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    OR              reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    PUNTO           reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    TERN            reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    PARDER          reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    COMA            reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    CORDER          reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    DOSPUNTOS       reduce using rule 77 (expression -> PARIZQ expression PARDER .)
    LLAVEDER        reduce using rule 77 (expression -> PARIZQ expression PARDER .)


state 141

    (78) expression -> PARSEINT PARIZQ expression . PARDER
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PARDER          shift and go to state 170
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 142

    (79) expression -> PARSEFLOAT PARIZQ expression . PARDER
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PARDER          shift and go to state 171
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 143

    (81) expression -> ID PUNTO TOSTRING . PARIZQ PARDER

    PARIZQ          shift and go to state 172


state 144

    (90) expression -> ID PARIZQ expressionList . PARDER
    (60) expressionList -> expressionList . COMA expression

    PARDER          shift and go to state 173
    COMA            shift and go to state 115


state 145

    (91) expression -> ID PARIZQ PARDER .

    PUNTOCOMA       reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    MAS             reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    MENOS           reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    POR             reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    MOD             reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    MENOR           reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    MAYOR           reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    MENORIG         reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    MAYORIG         reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    IGUALDAD        reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    DIF             reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    AND             reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    OR              reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    PUNTO           reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    TERN            reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    PARDER          reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    COMA            reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    CORDER          reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    DOSPUNTOS       reduce using rule 91 (expression -> ID PARIZQ PARDER .)
    LLAVEDER        reduce using rule 91 (expression -> ID PARIZQ PARDER .)


state 146

    (92) listArray -> ID CORIZQ expression . CORDER
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    CORDER          shift and go to state 174
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 147

    (89) expression -> CORIZQ expressionList CORDER .

    PUNTOCOMA       reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    MAS             reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    MENOS           reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    POR             reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    DIVIDIDO        reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    MOD             reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    MENOR           reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    MAYOR           reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    MENORIG         reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    MAYORIG         reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    IGUALDAD        reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    DIF             reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    AND             reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    OR              reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    PUNTO           reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    TERN            reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    PARDER          reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    COMA            reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    CORDER          reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    DOSPUNTOS       reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)
    LLAVEDER        reduce using rule 89 (expression -> CORIZQ expressionList CORDER .)


state 148

    (49) attributeList -> ID . DOSPUNTOS type PUNTOCOMA

    DOSPUNTOS       shift and go to state 175


state 149

    (47) interfacecreation -> INTERFACE ID LLAVEIZQ attributeList . LLAVEDER PUNTOCOMA
    (48) attributeList -> attributeList . ID DOSPUNTOS type PUNTOCOMA

    LLAVEDER        shift and go to state 177
    ID              shift and go to state 176


state 150

    (23) switch_statement -> SWITCH PARIZQ expression PARDER . LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> SWITCH PARIZQ expression PARDER . LLAVEIZQ cases_statement LLAVEDER

    LLAVEIZQ        shift and go to state 178


state 151

    (19) print -> CONSOLE PUNTO LOG PARIZQ expressionList . PARDER PUNTOCOMA
    (60) expressionList -> expressionList . COMA expression

    PARDER          shift and go to state 179
    COMA            shift and go to state 115


state 152

    (20) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ . block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ . block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ . block LLAVEDER
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    block                          shift and go to state 180
    ifinstruction                  shift and go to state 5
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 153

    (29) whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ . block LLAVEDER
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    block                          shift and go to state 181
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 154

    (36) interdeclaration -> VAR ID DOSPUNTOS ID IGUAL . LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    LLAVEIZQ        shift and go to state 182


state 155

    (32) declaration -> VAR ID DOSPUNTOS type IGUAL . expression PUNTOCOMA
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 183
    listArray                      shift and go to state 57

state 156

    (35) arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ . CORDER IGUAL expression PUNTOCOMA

    CORDER          shift and go to state 184


state 157

    (33) declaration -> VAR ID IGUAL expression PUNTOCOMA .

    CONSOLE         reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    IF              reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    WHILE           reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    VAR             reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    CONST           reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    FOR             reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    ID              reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    BREAK           reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    CONTINUE        reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    FUNC            reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    RETURN          reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    INTERFACE       reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    SWITCH          reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    $end            reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    MENOS           reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    NOT             reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    PARIZQ          reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    PARSEINT        reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    PARSEFLOAT      reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    TYPEOF          reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    ENTERO          reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    CADENA          reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    DECIMAL         reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    BOOLEANO        reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    CORIZQ          reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    LLAVEDER        reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    DEFAULT         reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)
    CASE            reduce using rule 33 (declaration -> VAR ID IGUAL expression PUNTOCOMA .)


state 158

    (42) call -> ID PARIZQ expressionList PARDER PUNTOCOMA .

    CONSOLE         reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    IF              reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    WHILE           reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    VAR             reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    CONST           reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    FOR             reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    ID              reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    BREAK           reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    CONTINUE        reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    FUNC            reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    RETURN          reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    INTERFACE       reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    SWITCH          reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    $end            reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    LLAVEDER        reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    DEFAULT         reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)
    CASE            reduce using rule 42 (call -> ID PARIZQ expressionList PARDER PUNTOCOMA .)


state 159

    (60) expressionList -> expressionList COMA expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PARDER          reduce using rule 60 (expressionList -> expressionList COMA expression .)
    COMA            reduce using rule 60 (expressionList -> expressionList COMA expression .)
    CORDER          reduce using rule 60 (expressionList -> expressionList COMA expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 160

    (34) declaration -> CONST ID DOSPUNTOS type IGUAL . expression PUNTOCOMA
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 185
    listArray                      shift and go to state 57

state 161

    (31) forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA . operadores PARDER LLAVEIZQ block LLAVEDER
    (30) operadores -> . ID MAS MAS

    ID              shift and go to state 187

    operadores                     shift and go to state 186

state 162

    (32) declaration -> VAR ID DOSPUNTOS . type IGUAL expression PUNTOCOMA
    (56) type -> . NUMBER
    (57) type -> . FLOAT
    (58) type -> . STRING
    (59) type -> . BOOL

    NUMBER          shift and go to state 108
    FLOAT           shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111

    type                           shift and go to state 188

state 163

    (44) functionstmt -> FUNC ID funcparams functype LLAVEIZQ . block LLAVEDER
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    block                          shift and go to state 189
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 164

    (52) functype -> DOSPUNTOS type .

    LLAVEIZQ        reduce using rule 52 (functype -> DOSPUNTOS type .)


state 165

    (45) funcparams -> PARIZQ paramsList PARDER .

    DOSPUNTOS       reduce using rule 45 (funcparams -> PARIZQ paramsList PARDER .)
    LLAVEIZQ        reduce using rule 45 (funcparams -> PARIZQ paramsList PARDER .)


state 166

    (50) paramsList -> paramsList COMA . ID DOSPUNTOS type

    ID              shift and go to state 190


state 167

    (51) paramsList -> ID DOSPUNTOS . type
    (56) type -> . NUMBER
    (57) type -> . FLOAT
    (58) type -> . STRING
    (59) type -> . BOOL

    NUMBER          shift and go to state 108
    FLOAT           shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111

    type                           shift and go to state 191

state 168

    (80) expression -> expression PUNTO TOSTRING PARIZQ . PARDER

    PARDER          shift and go to state 192


state 169

    (83) expression -> expression TERN expression DOSPUNTOS . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 193
    listArray                      shift and go to state 57

state 170

    (78) expression -> PARSEINT PARIZQ expression PARDER .

    PUNTOCOMA       reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    MAS             reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    MENOS           reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    POR             reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    MOD             reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    MENOR           reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    MAYOR           reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    MENORIG         reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    MAYORIG         reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    IGUALDAD        reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    DIF             reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    AND             reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    OR              reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    PUNTO           reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    TERN            reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    PARDER          reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    COMA            reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    CORDER          reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    DOSPUNTOS       reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)
    LLAVEDER        reduce using rule 78 (expression -> PARSEINT PARIZQ expression PARDER .)


state 171

    (79) expression -> PARSEFLOAT PARIZQ expression PARDER .

    PUNTOCOMA       reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    MAS             reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    MENOS           reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    POR             reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    MOD             reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    MENOR           reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    MAYOR           reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    MENORIG         reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    MAYORIG         reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    IGUALDAD        reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    DIF             reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    AND             reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    OR              reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    PUNTO           reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    TERN            reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    PARDER          reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    COMA            reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    CORDER          reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    DOSPUNTOS       reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)
    LLAVEDER        reduce using rule 79 (expression -> PARSEFLOAT PARIZQ expression PARDER .)


state 172

    (81) expression -> ID PUNTO TOSTRING PARIZQ . PARDER

    PARDER          shift and go to state 194


state 173

    (90) expression -> ID PARIZQ expressionList PARDER .

    PUNTOCOMA       reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    MAS             reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    MENOS           reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    POR             reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    DIVIDIDO        reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    MOD             reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    MENOR           reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    MAYOR           reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    MENORIG         reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    MAYORIG         reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    IGUALDAD        reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    DIF             reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    AND             reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    OR              reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    PUNTO           reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    TERN            reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    PARDER          reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    COMA            reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    CORDER          reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    DOSPUNTOS       reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)
    LLAVEDER        reduce using rule 90 (expression -> ID PARIZQ expressionList PARDER .)


state 174

    (92) listArray -> ID CORIZQ expression CORDER .

    PUNTOCOMA       reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    MAS             reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    MENOS           reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    POR             reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    DIVIDIDO        reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    MOD             reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    MENOR           reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    MAYOR           reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    MENORIG         reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    MAYORIG         reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    IGUALDAD        reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    DIF             reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    AND             reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    OR              reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    PUNTO           reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    TERN            reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    PARDER          reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    COMA            reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    CORDER          reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    DOSPUNTOS       reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)
    LLAVEDER        reduce using rule 92 (listArray -> ID CORIZQ expression CORDER .)


state 175

    (49) attributeList -> ID DOSPUNTOS . type PUNTOCOMA
    (56) type -> . NUMBER
    (57) type -> . FLOAT
    (58) type -> . STRING
    (59) type -> . BOOL

    NUMBER          shift and go to state 108
    FLOAT           shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111

    type                           shift and go to state 195

state 176

    (48) attributeList -> attributeList ID . DOSPUNTOS type PUNTOCOMA

    DOSPUNTOS       shift and go to state 196


state 177

    (47) interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 197


state 178

    (23) switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ . cases_statement default_case LLAVEDER
    (24) switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ . cases_statement LLAVEDER
    (25) cases_statement -> . cases_statement case_statement
    (26) cases_statement -> . case_statement
    (27) case_statement -> . CASE expression DOSPUNTOS block

    CASE            shift and go to state 200

    cases_statement                shift and go to state 198
    case_statement                 shift and go to state 199

state 179

    (19) print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 201


state 180

    (20) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block . LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block . LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block . LLAVEDER
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    LLAVEDER        shift and go to state 202
    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    ifinstruction                  shift and go to state 5
    instruccion                    shift and go to state 32
    print                          shift and go to state 4
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 181

    (29) whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block . LLAVEDER
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    LLAVEDER        shift and go to state 203
    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    instruccion                    shift and go to state 32
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 182

    (36) interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ . interfaceContent LLAVEDER PUNTOCOMA
    (37) interfaceContent -> . interfaceContent COMA ID DOSPUNTOS expression
    (38) interfaceContent -> . ID DOSPUNTOS expression

    ID              shift and go to state 204

    interfaceContent               shift and go to state 205

state 183

    (32) declaration -> VAR ID DOSPUNTOS type IGUAL expression . PUNTOCOMA
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       shift and go to state 206
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 184

    (35) arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER . IGUAL expression PUNTOCOMA

    IGUAL           shift and go to state 207


state 185

    (34) declaration -> CONST ID DOSPUNTOS type IGUAL expression . PUNTOCOMA
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       shift and go to state 208
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 186

    (31) forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores . PARDER LLAVEIZQ block LLAVEDER

    PARDER          shift and go to state 209


state 187

    (30) operadores -> ID . MAS MAS

    MAS             shift and go to state 210


state 188

    (32) declaration -> VAR ID DOSPUNTOS type . IGUAL expression PUNTOCOMA

    IGUAL           shift and go to state 155


state 189

    (44) functionstmt -> FUNC ID funcparams functype LLAVEIZQ block . LLAVEDER
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    LLAVEDER        shift and go to state 211
    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    instruccion                    shift and go to state 32
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 190

    (50) paramsList -> paramsList COMA ID . DOSPUNTOS type

    DOSPUNTOS       shift and go to state 212


state 191

    (51) paramsList -> ID DOSPUNTOS type .

    PARDER          reduce using rule 51 (paramsList -> ID DOSPUNTOS type .)
    COMA            reduce using rule 51 (paramsList -> ID DOSPUNTOS type .)


state 192

    (80) expression -> expression PUNTO TOSTRING PARIZQ PARDER .

    PUNTOCOMA       reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    MAS             reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    MENOS           reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    POR             reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    MOD             reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    MENOR           reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    MAYOR           reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    MENORIG         reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    MAYORIG         reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    IGUALDAD        reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    DIF             reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    AND             reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    OR              reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    PUNTO           reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    TERN            reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    PARDER          reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    COMA            reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    CORDER          reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    DOSPUNTOS       reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)
    LLAVEDER        reduce using rule 80 (expression -> expression PUNTO TOSTRING PARIZQ PARDER .)


state 193

    (83) expression -> expression TERN expression DOSPUNTOS expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for IGUALDAD resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PUNTO resolved as shift
  ! shift/reduce conflict for TERN resolved as shift
    PUNTOCOMA       reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .)
    PARDER          reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .)
    COMA            reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .)
    CORDER          reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .)
    DOSPUNTOS       reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .)
    LLAVEDER        reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90

  ! MAS             [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! MENOS           [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! POR             [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! DIVIDIDO        [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! MOD             [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! MENOR           [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! MAYOR           [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! MENORIG         [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! MAYORIG         [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! IGUALDAD        [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! DIF             [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! AND             [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! OR              [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! PUNTO           [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]
  ! TERN            [ reduce using rule 83 (expression -> expression TERN expression DOSPUNTOS expression .) ]


state 194

    (81) expression -> ID PUNTO TOSTRING PARIZQ PARDER .

    PUNTOCOMA       reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    MAS             reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    MENOS           reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    POR             reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    MOD             reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    MENOR           reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    MAYOR           reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    MENORIG         reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    MAYORIG         reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    IGUALDAD        reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    DIF             reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    AND             reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    OR              reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    PUNTO           reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    TERN            reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    PARDER          reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    COMA            reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    CORDER          reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    DOSPUNTOS       reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)
    LLAVEDER        reduce using rule 81 (expression -> ID PUNTO TOSTRING PARIZQ PARDER .)


state 195

    (49) attributeList -> ID DOSPUNTOS type . PUNTOCOMA

    PUNTOCOMA       shift and go to state 213


state 196

    (48) attributeList -> attributeList ID DOSPUNTOS . type PUNTOCOMA
    (56) type -> . NUMBER
    (57) type -> . FLOAT
    (58) type -> . STRING
    (59) type -> . BOOL

    NUMBER          shift and go to state 108
    FLOAT           shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111

    type                           shift and go to state 214

state 197

    (47) interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .

    CONSOLE         reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    IF              reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    WHILE           reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    VAR             reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    CONST           reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    FOR             reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    ID              reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    BREAK           reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    CONTINUE        reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    FUNC            reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    RETURN          reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    INTERFACE       reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    SWITCH          reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    $end            reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    LLAVEDER        reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    DEFAULT         reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)
    CASE            reduce using rule 47 (interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA .)


state 198

    (23) switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement . default_case LLAVEDER
    (24) switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement . LLAVEDER
    (25) cases_statement -> cases_statement . case_statement
    (28) default_case -> . DEFAULT DOSPUNTOS block
    (27) case_statement -> . CASE expression DOSPUNTOS block

    LLAVEDER        shift and go to state 216
    DEFAULT         shift and go to state 218
    CASE            shift and go to state 200

    default_case                   shift and go to state 215
    case_statement                 shift and go to state 217

state 199

    (26) cases_statement -> case_statement .

    LLAVEDER        reduce using rule 26 (cases_statement -> case_statement .)
    DEFAULT         reduce using rule 26 (cases_statement -> case_statement .)
    CASE            reduce using rule 26 (cases_statement -> case_statement .)


state 200

    (27) case_statement -> CASE . expression DOSPUNTOS block
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 219
    listArray                      shift and go to state 57

state 201

    (19) print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .

    CONSOLE         reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    IF              reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    WHILE           reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    VAR             reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    CONST           reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    FOR             reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    ID              reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    BREAK           reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    CONTINUE        reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    FUNC            reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    RETURN          reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    INTERFACE       reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    SWITCH          reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    $end            reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    LLAVEDER        reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    DEFAULT         reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)
    CASE            reduce using rule 19 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA .)


state 202

    (20) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER . ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER . ELSE ifinstruction
    (22) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .

    ELSE            shift and go to state 220
    CONSOLE         reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    CONST           reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    FOR             reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    INTERFACE       reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    SWITCH          reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    DEFAULT         reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    CASE            reduce using rule 22 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)


state 203

    (29) whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .

    CONSOLE         reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    CONST           reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    FOR             reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    INTERFACE       reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    SWITCH          reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    DEFAULT         reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    CASE            reduce using rule 29 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)


state 204

    (38) interfaceContent -> ID . DOSPUNTOS expression

    DOSPUNTOS       shift and go to state 221


state 205

    (36) interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent . LLAVEDER PUNTOCOMA
    (37) interfaceContent -> interfaceContent . COMA ID DOSPUNTOS expression

    LLAVEDER        shift and go to state 222
    COMA            shift and go to state 223


state 206

    (32) declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .

    CONSOLE         reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    IF              reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    WHILE           reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    VAR             reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    CONST           reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    FOR             reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    ID              reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    BREAK           reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    CONTINUE        reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    FUNC            reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    RETURN          reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    INTERFACE       reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    SWITCH          reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    $end            reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    MENOS           reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    NOT             reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    PARIZQ          reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    PARSEINT        reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    PARSEFLOAT      reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    TYPEOF          reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    ENTERO          reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    CADENA          reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    DECIMAL         reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    BOOLEANO        reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    CORIZQ          reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    LLAVEDER        reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    DEFAULT         reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    CASE            reduce using rule 32 (declaration -> VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)


state 207

    (35) arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL . expression PUNTOCOMA
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 224
    listArray                      shift and go to state 57

state 208

    (34) declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .

    CONSOLE         reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    IF              reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    WHILE           reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    VAR             reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    CONST           reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    FOR             reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    ID              reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    BREAK           reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    CONTINUE        reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    FUNC            reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    RETURN          reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    INTERFACE       reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    SWITCH          reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    $end            reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    MENOS           reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    NOT             reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    PARIZQ          reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    PARSEINT        reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    PARSEFLOAT      reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    TYPEOF          reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    ENTERO          reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    CADENA          reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    DECIMAL         reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    BOOLEANO        reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    CORIZQ          reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    LLAVEDER        reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    DEFAULT         reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)
    CASE            reduce using rule 34 (declaration -> CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA .)


state 209

    (31) forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER . LLAVEIZQ block LLAVEDER

    LLAVEIZQ        shift and go to state 225


state 210

    (30) operadores -> ID MAS . MAS

    MAS             shift and go to state 226


state 211

    (44) functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .

    CONSOLE         reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    CONST           reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    FOR             reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    INTERFACE       reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    SWITCH          reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    DEFAULT         reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    CASE            reduce using rule 44 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)


state 212

    (50) paramsList -> paramsList COMA ID DOSPUNTOS . type
    (56) type -> . NUMBER
    (57) type -> . FLOAT
    (58) type -> . STRING
    (59) type -> . BOOL

    NUMBER          shift and go to state 108
    FLOAT           shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111

    type                           shift and go to state 227

state 213

    (49) attributeList -> ID DOSPUNTOS type PUNTOCOMA .

    LLAVEDER        reduce using rule 49 (attributeList -> ID DOSPUNTOS type PUNTOCOMA .)
    ID              reduce using rule 49 (attributeList -> ID DOSPUNTOS type PUNTOCOMA .)


state 214

    (48) attributeList -> attributeList ID DOSPUNTOS type . PUNTOCOMA

    PUNTOCOMA       shift and go to state 228


state 215

    (23) switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case . LLAVEDER

    LLAVEDER        shift and go to state 229


state 216

    (24) switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .

    CONSOLE         reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    IF              reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    WHILE           reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    VAR             reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    CONST           reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    FOR             reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    ID              reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    BREAK           reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    CONTINUE        reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    FUNC            reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    RETURN          reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    INTERFACE       reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    SWITCH          reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    $end            reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    LLAVEDER        reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    DEFAULT         reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)
    CASE            reduce using rule 24 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER .)


state 217

    (25) cases_statement -> cases_statement case_statement .

    LLAVEDER        reduce using rule 25 (cases_statement -> cases_statement case_statement .)
    DEFAULT         reduce using rule 25 (cases_statement -> cases_statement case_statement .)
    CASE            reduce using rule 25 (cases_statement -> cases_statement case_statement .)


state 218

    (28) default_case -> DEFAULT . DOSPUNTOS block

    DOSPUNTOS       shift and go to state 230


state 219

    (27) case_statement -> CASE expression . DOSPUNTOS block
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    DOSPUNTOS       shift and go to state 231
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 220

    (20) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE . LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE . ifinstruction
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER

    LLAVEIZQ        shift and go to state 232
    IF              shift and go to state 20

    ifinstruction                  shift and go to state 233

state 221

    (38) interfaceContent -> ID DOSPUNTOS . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 234
    listArray                      shift and go to state 57

state 222

    (36) interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 235


state 223

    (37) interfaceContent -> interfaceContent COMA . ID DOSPUNTOS expression

    ID              shift and go to state 236


state 224

    (35) arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression . PUNTOCOMA
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    PUNTOCOMA       shift and go to state 237
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 225

    (31) forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ . block LLAVEDER
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    declaration                    shift and go to state 7
    block                          shift and go to state 238
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 226

    (30) operadores -> ID MAS MAS .

    PARDER          reduce using rule 30 (operadores -> ID MAS MAS .)


state 227

    (50) paramsList -> paramsList COMA ID DOSPUNTOS type .

    PARDER          reduce using rule 50 (paramsList -> paramsList COMA ID DOSPUNTOS type .)
    COMA            reduce using rule 50 (paramsList -> paramsList COMA ID DOSPUNTOS type .)


state 228

    (48) attributeList -> attributeList ID DOSPUNTOS type PUNTOCOMA .

    LLAVEDER        reduce using rule 48 (attributeList -> attributeList ID DOSPUNTOS type PUNTOCOMA .)
    ID              reduce using rule 48 (attributeList -> attributeList ID DOSPUNTOS type PUNTOCOMA .)


state 229

    (23) switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .

    CONSOLE         reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    IF              reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    WHILE           reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    VAR             reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    CONST           reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    FOR             reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    ID              reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    BREAK           reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    CONTINUE        reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    FUNC            reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    RETURN          reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    INTERFACE       reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    SWITCH          reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    $end            reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    LLAVEDER        reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    DEFAULT         reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)
    CASE            reduce using rule 23 (switch_statement -> SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER .)


state 230

    (28) default_case -> DEFAULT DOSPUNTOS . block
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    block                          shift and go to state 239
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 231

    (27) case_statement -> CASE expression DOSPUNTOS . block
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    block                          shift and go to state 240
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 232

    (20) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ . block LLAVEDER
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    block                          shift and go to state 241
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 233

    (21) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .

    CONSOLE         reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    IF              reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    WHILE           reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    VAR             reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    CONST           reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    FOR             reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    ID              reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    BREAK           reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    CONTINUE        reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    FUNC            reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    RETURN          reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    INTERFACE       reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    SWITCH          reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    $end            reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    LLAVEDER        reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    DEFAULT         reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)
    CASE            reduce using rule 21 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction .)


state 234

    (38) interfaceContent -> ID DOSPUNTOS expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    LLAVEDER        reduce using rule 38 (interfaceContent -> ID DOSPUNTOS expression .)
    COMA            reduce using rule 38 (interfaceContent -> ID DOSPUNTOS expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90


state 235

    (36) interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .

    CONSOLE         reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    IF              reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    WHILE           reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    VAR             reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    CONST           reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    FOR             reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    ID              reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    BREAK           reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    CONTINUE        reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    FUNC            reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    RETURN          reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    INTERFACE       reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    SWITCH          reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    $end            reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    LLAVEDER        reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    DEFAULT         reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)
    CASE            reduce using rule 36 (interdeclaration -> VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA .)


state 236

    (37) interfaceContent -> interfaceContent COMA ID . DOSPUNTOS expression

    DOSPUNTOS       shift and go to state 242


state 237

    (35) arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .

    CONSOLE         reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    IF              reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    WHILE           reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    VAR             reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    CONST           reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    FOR             reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    ID              reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    BREAK           reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    CONTINUE        reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    FUNC            reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    RETURN          reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    INTERFACE       reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    SWITCH          reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    $end            reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    LLAVEDER        reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    DEFAULT         reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)
    CASE            reduce using rule 35 (arraydeclaration -> VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA .)


state 238

    (31) forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block . LLAVEDER
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    LLAVEDER        shift and go to state 243
    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    declaration                    shift and go to state 7
    instruccion                    shift and go to state 32
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 239

    (28) default_case -> DEFAULT DOSPUNTOS block .
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    LLAVEDER        reduce using rule 28 (default_case -> DEFAULT DOSPUNTOS block .)
    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    instruccion                    shift and go to state 32
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 240

    (27) case_statement -> CASE expression DOSPUNTOS block .
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    LLAVEDER        reduce using rule 27 (case_statement -> CASE expression DOSPUNTOS block .)
    DEFAULT         reduce using rule 27 (case_statement -> CASE expression DOSPUNTOS block .)
    CASE            reduce using rule 27 (case_statement -> CASE expression DOSPUNTOS block .)
    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    instruccion                    shift and go to state 32
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 241

    (20) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block . LLAVEDER
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . whileinstruction
    (7) instruccion -> . declaration
    (8) instruccion -> . arraydeclaration
    (9) instruccion -> . forinstruction
    (10) instruccion -> . assignment
    (11) instruccion -> . breakstmt
    (12) instruccion -> . continuestmt
    (13) instruccion -> . functionstmt
    (14) instruccion -> . call
    (15) instruccion -> . returnstmt
    (16) instruccion -> . interfacecreation
    (17) instruccion -> . switch_statement
    (18) instruccion -> . interdeclaration
    (19) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PUNTOCOMA
    (20) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (21) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE ifinstruction
    (22) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (29) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (32) declaration -> . VAR ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (33) declaration -> . VAR ID IGUAL expression PUNTOCOMA
    (34) declaration -> . CONST ID DOSPUNTOS type IGUAL expression PUNTOCOMA
    (35) arraydeclaration -> . VAR ID DOSPUNTOS type CORIZQ CORDER IGUAL expression PUNTOCOMA
    (31) forinstruction -> . FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER
    (39) assignment -> . ID IGUAL expression PUNTOCOMA
    (54) breakstmt -> . BREAK PUNTOCOMA
    (55) continuestmt -> . CONTINUE PUNTOCOMA
    (44) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (42) call -> . ID PARIZQ expressionList PARDER PUNTOCOMA
    (43) call -> . ID PARIZQ PARDER PUNTOCOMA
    (40) returnstmt -> . RETURN expression PUNTOCOMA
    (41) returnstmt -> . RETURN PUNTOCOMA
    (47) interfacecreation -> . INTERFACE ID LLAVEIZQ attributeList LLAVEDER PUNTOCOMA
    (23) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement default_case LLAVEDER
    (24) switch_statement -> . SWITCH PARIZQ expression PARDER LLAVEIZQ cases_statement LLAVEDER
    (36) interdeclaration -> . VAR ID DOSPUNTOS ID IGUAL LLAVEIZQ interfaceContent LLAVEDER PUNTOCOMA

    LLAVEDER        shift and go to state 244
    CONSOLE         shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 24
    FOR             shift and go to state 25
    ID              shift and go to state 23
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNC            shift and go to state 28
    RETURN          shift and go to state 29
    INTERFACE       shift and go to state 30
    SWITCH          shift and go to state 31

    instruccion                    shift and go to state 32
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    whileinstruction               shift and go to state 6
    declaration                    shift and go to state 7
    arraydeclaration               shift and go to state 8
    forinstruction                 shift and go to state 9
    assignment                     shift and go to state 10
    breakstmt                      shift and go to state 11
    continuestmt                   shift and go to state 12
    functionstmt                   shift and go to state 13
    call                           shift and go to state 14
    returnstmt                     shift and go to state 15
    interfacecreation              shift and go to state 16
    switch_statement               shift and go to state 17
    interdeclaration               shift and go to state 18

state 242

    (37) interfaceContent -> interfaceContent COMA ID DOSPUNTOS . expression
    (62) expression -> . expression MAS expression
    (63) expression -> . expression MENOS expression
    (64) expression -> . expression POR expression
    (65) expression -> . expression DIVIDIDO expression
    (66) expression -> . expression MOD expression
    (67) expression -> . MENOS expression
    (68) expression -> . expression MENOR expression
    (69) expression -> . expression MAYOR expression
    (70) expression -> . expression MENORIG expression
    (71) expression -> . expression MAYORIG expression
    (72) expression -> . expression IGUALDAD expression
    (73) expression -> . expression DIF expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . PARIZQ expression PARDER
    (78) expression -> . PARSEINT PARIZQ expression PARDER
    (79) expression -> . PARSEFLOAT PARIZQ expression PARDER
    (80) expression -> . expression PUNTO TOSTRING PARIZQ PARDER
    (81) expression -> . ID PUNTO TOSTRING PARIZQ PARDER
    (82) expression -> . TYPEOF expression
    (83) expression -> . expression TERN expression DOSPUNTOS expression
    (84) expression -> . ENTERO
    (85) expression -> . CADENA
    (86) expression -> . DECIMAL
    (87) expression -> . BOOLEANO
    (88) expression -> . listArray
    (89) expression -> . CORIZQ expressionList CORDER
    (90) expression -> . ID PARIZQ expressionList PARDER
    (91) expression -> . ID PARIZQ PARDER
    (92) listArray -> . ID CORIZQ expression CORDER
    (93) listArray -> . ID

    MENOS           shift and go to state 46
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    PARSEINT        shift and go to state 49
    PARSEFLOAT      shift and go to state 50
    ID              shift and go to state 51
    TYPEOF          shift and go to state 52
    ENTERO          shift and go to state 53
    CADENA          shift and go to state 54
    DECIMAL         shift and go to state 55
    BOOLEANO        shift and go to state 56
    CORIZQ          shift and go to state 58

    expression                     shift and go to state 245
    listArray                      shift and go to state 57

state 243

    (31) forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .

    CONSOLE         reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    CONST           reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    FOR             reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    INTERFACE       reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    SWITCH          reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    DEFAULT         reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)
    CASE            reduce using rule 31 (forinstruction -> FOR PARIZQ declaration expression PUNTOCOMA operadores PARDER LLAVEIZQ block LLAVEDER .)


state 244

    (20) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .

    CONSOLE         reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    CONST           reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    FOR             reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    INTERFACE       reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    SWITCH          reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    DEFAULT         reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    CASE            reduce using rule 20 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)


state 245

    (37) interfaceContent -> interfaceContent COMA ID DOSPUNTOS expression .
    (62) expression -> expression . MAS expression
    (63) expression -> expression . MENOS expression
    (64) expression -> expression . POR expression
    (65) expression -> expression . DIVIDIDO expression
    (66) expression -> expression . MOD expression
    (68) expression -> expression . MENOR expression
    (69) expression -> expression . MAYOR expression
    (70) expression -> expression . MENORIG expression
    (71) expression -> expression . MAYORIG expression
    (72) expression -> expression . IGUALDAD expression
    (73) expression -> expression . DIF expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (80) expression -> expression . PUNTO TOSTRING PARIZQ PARDER
    (83) expression -> expression . TERN expression DOSPUNTOS expression

    LLAVEDER        reduce using rule 37 (interfaceContent -> interfaceContent COMA ID DOSPUNTOS expression .)
    COMA            reduce using rule 37 (interfaceContent -> interfaceContent COMA ID DOSPUNTOS expression .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77
    POR             shift and go to state 78
    DIVIDIDO        shift and go to state 79
    MOD             shift and go to state 80
    MENOR           shift and go to state 81
    MAYOR           shift and go to state 82
    MENORIG         shift and go to state 83
    MAYORIG         shift and go to state 84
    IGUALDAD        shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88
    PUNTO           shift and go to state 89
    TERN            shift and go to state 90

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PUNTO in state 51 resolved as shift
WARNING: shift/reduce conflict for MAS in state 92 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 92 resolved as shift
WARNING: shift/reduce conflict for POR in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 92 resolved as shift
WARNING: shift/reduce conflict for MOD in state 92 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 92 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 92 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 92 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 92 resolved as shift
WARNING: shift/reduce conflict for IGUALDAD in state 92 resolved as shift
WARNING: shift/reduce conflict for DIF in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for PUNTO in state 92 resolved as shift
WARNING: shift/reduce conflict for TERN in state 92 resolved as shift
WARNING: shift/reduce conflict for MAS in state 99 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 99 resolved as shift
WARNING: shift/reduce conflict for POR in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 99 resolved as shift
WARNING: shift/reduce conflict for MOD in state 99 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 99 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 99 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 99 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 99 resolved as shift
WARNING: shift/reduce conflict for IGUALDAD in state 99 resolved as shift
WARNING: shift/reduce conflict for DIF in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 99 resolved as shift
WARNING: shift/reduce conflict for OR in state 99 resolved as shift
WARNING: shift/reduce conflict for PUNTO in state 99 resolved as shift
WARNING: shift/reduce conflict for TERN in state 99 resolved as shift
WARNING: shift/reduce conflict for MAS in state 135 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 135 resolved as shift
WARNING: shift/reduce conflict for POR in state 135 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 135 resolved as shift
WARNING: shift/reduce conflict for MOD in state 135 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 135 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 135 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 135 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 135 resolved as shift
WARNING: shift/reduce conflict for IGUALDAD in state 135 resolved as shift
WARNING: shift/reduce conflict for DIF in state 135 resolved as shift
WARNING: shift/reduce conflict for AND in state 135 resolved as shift
WARNING: shift/reduce conflict for OR in state 135 resolved as shift
WARNING: shift/reduce conflict for PUNTO in state 135 resolved as shift
WARNING: shift/reduce conflict for TERN in state 135 resolved as shift
WARNING: shift/reduce conflict for MAS in state 136 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 136 resolved as shift
WARNING: shift/reduce conflict for POR in state 136 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 136 resolved as shift
WARNING: shift/reduce conflict for MOD in state 136 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 136 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 136 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 136 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 136 resolved as shift
WARNING: shift/reduce conflict for IGUALDAD in state 136 resolved as shift
WARNING: shift/reduce conflict for DIF in state 136 resolved as shift
WARNING: shift/reduce conflict for AND in state 136 resolved as shift
WARNING: shift/reduce conflict for OR in state 136 resolved as shift
WARNING: shift/reduce conflict for PUNTO in state 136 resolved as shift
WARNING: shift/reduce conflict for TERN in state 136 resolved as shift
WARNING: shift/reduce conflict for MAS in state 137 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 137 resolved as shift
WARNING: shift/reduce conflict for POR in state 137 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 137 resolved as shift
WARNING: shift/reduce conflict for MOD in state 137 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 137 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 137 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 137 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 137 resolved as shift
WARNING: shift/reduce conflict for IGUALDAD in state 137 resolved as shift
WARNING: shift/reduce conflict for DIF in state 137 resolved as shift
WARNING: shift/reduce conflict for AND in state 137 resolved as shift
WARNING: shift/reduce conflict for OR in state 137 resolved as shift
WARNING: shift/reduce conflict for PUNTO in state 137 resolved as shift
WARNING: shift/reduce conflict for TERN in state 137 resolved as shift
WARNING: shift/reduce conflict for MAS in state 193 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 193 resolved as shift
WARNING: shift/reduce conflict for POR in state 193 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 193 resolved as shift
WARNING: shift/reduce conflict for MOD in state 193 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 193 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 193 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 193 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 193 resolved as shift
WARNING: shift/reduce conflict for IGUALDAD in state 193 resolved as shift
WARNING: shift/reduce conflict for DIF in state 193 resolved as shift
WARNING: shift/reduce conflict for AND in state 193 resolved as shift
WARNING: shift/reduce conflict for OR in state 193 resolved as shift
WARNING: shift/reduce conflict for PUNTO in state 193 resolved as shift
WARNING: shift/reduce conflict for TERN in state 193 resolved as shift
